{
    "변수": "데이터를 저장하는 이름. 파이썬에서는 변수에 데이터 타입을 명시하지 않아도 되고, 변수는 다양한 데이터 타입을 저장할 수 있습니다.",
    "함수": "특정 작업을 수행하는 코드 블록을 정의한 것으로, 반복되는 작업을 함수로 만들어 호출할 수 있습니다. def 키워드로 정의합니다.",
    "리스트": "여러 값을 하나의 변수에 저장할 수 있는 데이터 타입. 리스트는 순서가 있고, 다양한 타입의 데이터를 포함할 수 있습니다.",
    "튜플": "리스트와 유사하지만, 튜플은 수정이 불가능(불변)합니다. 읽기 전용 목록을 저장할 때 사용합니다.",
    "딕셔너리": "키와 값의 쌍으로 데이터를 저장하는 구조. 각 키는 고유하며, 키를 사용하여 해당 값을 참조할 수 있습니다.",
    "인덱스": "리스트, 튜플, 문자열 등의 데이터에서 특정 항목의 위치를 나타내는 숫자. 파이썬에서는 인덱스가 0부터 시작합니다.",
    "반복문": "특정 코드를 여러 번 반복해서 실행하는 구문. for와 while 반복문이 있습니다.",
    "조건문": "조건에 따라 코드를 실행할지 결정하는 구문. if, elif, else가 사용됩니다.",
    "모듈": "파이썬 코드가 들어있는 파일로, 다른 파일에서 불러와 사용할 수 있는 독립적인 코드 블록. import 키워드를 사용해 모듈을 가져옵니다.",
    "클래스": "객체를 정의하기 위한 청사진으로, 변수와 함수를 하나로 묶는 구조. 객체 지향 프로그래밍에서 사용되며, 클래스는 객체를 생성하기 위한 템플릿입니다.",
    "인스턴스": "클래스로부터 생성된 객체입니다. 클래스는 설계도이고, 인스턴스는 그 설계도를 기반으로 만들어진 실제 객체입니다.",
    "self": "클래스 메소드 내에서 인스턴스 자체를 참조할 때 사용하는 매개변수. 메소드에서 첫 번째 인수로 항상 self를 전달해야 합니다.",
    "리스트 컴프리헨션": "리스트를 간결하게 생성하는 구문으로, 반복문과 조건문을 한 줄로 표현할 수 있습니다.",
    "이터레이터": "반복 가능한 객체에서 값을 하나씩 꺼내주는 객체. for 루프에서 자주 사용됩니다.",
    "제너레이터": "이터레이터를 쉽게 생성할 수 있는 함수로, yield 키워드를 사용하여 값을 하나씩 반환합니다. 메모리 효율성이 뛰어납니다.",
    "GIL": "Python GIL(Global Interpreter Lock)은 여러 스레드가 동시에 실행되는 것을 막고, 한 번에 하나의 스레드만 실행되도록 하는 잠금 메커니즘입니다.",
    "코루틴": "Python 코루틴(Coroutine)은 함수 실행을 중단하고 재개할 수 있는 비동기 프로그래밍 방식으로, async와 await 키워드를 사용해 동시성을 효율적으로 처리합니다.",
    "람다 표현식": "익명 함수(Anonymous Function)를 간단히 정의할 때 사용됩니다.",
    "배열": "NumPy에서 핵심이 되는 데이터 구조로, 다차원 배열(ndarray)을 의미. 배열 연산을 통해 빠르고 효율적인 수학적 계산을 수행.",
    "ndarray": "NumPy에서 사용되는 기본 배열 객체로, n-차원의 배열을 나타냄. 다차원 데이터를 효율적으로 처리하기 위한 핵심 클래스.",
    "차원": "배열의 구조를 나타내는 개념으로, 배열이 몇 차원인지 나타냄. 종종 축(axis)으로 표현.",
    "축 (axis)": "배열에서 각 차원을 나타내는 축을 의미. 축 0은 행을 기준, 축 1은 열을 기준.",
    "형상": "배열의 각 차원에서 요소의 개수를 나타내는 튜플. 예를 들어, 2차원 배열에서 (행, 열)의 형태로 나타냄.",
    "브로드캐스팅": "크기가 다른 배열 간의 연산을 가능하게 하는 기능. 작은 배열이 큰 배열의 형상에 맞춰 자동으로 확장되어 연산됨.",
    "슬라이싱": "배열의 일부를 선택하는 방법. 리스트나 문자열처럼 배열의 인덱스를 이용해 부분 배열을 추출할 수 있음.",
    "뷰": "배열의 데이터를 복사하지 않고, 같은 데이터를 참조하는 새로운 배열을 의미. 뷰를 변경하면 원래 배열에도 영향을 줌.",
    "복사": "원본 배열과는 독립적으로 데이터를 복사한 새로운 배열을 생성. 복사된 배열을 변경해도 원본 배열에는 영향이 없음.",
    "정렬": "배열의 요소들을 크기 순서대로 정렬하는 기능. 배열 내에서 오름차순 또는 내림차순으로 정렬 가능.",
    "벡터화 연산": "배열 간의 연산을 반복문 없이 한 번에 수행할 수 있는 기능. NumPy의 모든 연산은 벡터화되어 있어 빠르고 효율적.",
    "집계 함수": "배열의 전체 또는 특정 축(axis)에서 값들을 집계하는 함수. 합계, 평균, 최대값, 최소값 등을 구할 수 있음.",
    "전치": "다차원 배열의 축을 전환하는 기능. 2차원 배열에서는 행과 열을 바꾸는 작업을 수행.",
    "랜덤 배열": "NumPy의 random 모듈을 사용해 임의의 값을 가지는 배열을 생성. 데이터 샘플링 및 시뮬레이션 등에 유용.",
    "reshape": "배열의 크기(shape)를 변경하는 기능. 원소의 개수는 유지하면서 다른 차원의 배열로 변환 가능.",
    "플랫": "다차원 배열을 1차원 배열로 평평하게 변환하는 작업.",
    "마스크 배열": "배열 내에서 특정 조건을 만족하는 값만 선택할 때 사용하는 배열. 조건을 부여하여 필터링된 결과를 얻음.",
    "NaN": "숫자가 아닌 값을 나타냄. 결측값을 표현할 때 사용되며, np.nan을 통해 NaN을 처리할 수 있음.",
    "DataFrame": "2차원 배열과 유사한 데이터 구조로, 행과 열로 구성된 데이터를 저장하고 처리하는 Pandas의 핵심 객체입니다.",
    "Series": "1차원 배열로, DataFrame의 열이 하나의 Series로 구성됩니다. 인덱스를 가지며 리스트와 유사하지만 더 많은 기능을 제공합니다.",
    "Index": "DataFrame이나 Series의 행 또는 열을 식별하는 라벨입니다. 숫자뿐만 아니라 문자열을 사용하여 데이터를 참조할 수 있습니다.",
    "iloc": "행과 열의 위치(숫자 인덱스)를 기준으로 데이터를 선택하는 방법입니다.",
    "loc": "라벨(인덱스나 열 이름)을 기준으로 데이터를 선택하는 방법입니다.",
    "head()": "DataFrame의 첫 n개의 행을 반환하는 함수로, 기본값은 5입니다. 데이터의 앞부분을 미리 볼 때 사용됩니다.",
    "tail()": "DataFrame의 마지막 n개의 행을 반환하는 함수입니다. 데이터의 끝부분을 미리 볼 때 사용됩니다.",
    "describe()": "DataFrame의 요약 통계 정보를 제공하는 함수로, 데이터의 평균, 분산, 최소값, 최대값 등의 통계를 한 번에 확인할 수 있습니다.",
    "groupby()": "데이터를 특정 기준에 따라 그룹화한 뒤, 집계 또는 변환 작업을 할 수 있는 함수입니다. SQL의 GROUP BY와 유사합니다.",
    "merge()": "두 개 이상의 DataFrame을 병합하는 함수로, SQL의 JOIN과 유사한 기능을 제공합니다.",
    "concat()": "여러 DataFrame을 연결하는 함수로, 위아래 또는 좌우로 데이터를 합칠 수 있습니다.",
    "pivot_table()": "데이터를 재구성하는 함수로, 특정 기준에 따라 데이터의 집계를 수행하고 결과를 표 형태로 보여줍니다.",
    "isnull()": "DataFrame에서 결측값(NaN)을 찾는 함수로, 결측값이 있는 위치를 True로 표시합니다.",
    "fillna()": "결측값(NaN)을 다른 값으로 대체하는 함수입니다. 평균값이나 0으로 결측값을 채울 때 사용됩니다.",
    "dropna()": "결측값이 포함된 행 또는 열을 제거하는 함수입니다.",
    "astype()": "데이터 타입을 변경하는 함수로, 예를 들어 정수형 데이터를 실수형으로 변환할 때 사용됩니다.",
    "apply()": "DataFrame의 각 행 또는 열에 함수를 적용하는 함수로, 복잡한 계산을 수행할 때 유용합니다.",
    "sort_values()": "데이터프레임을 특정 열의 값을 기준으로 정렬하는 함수입니다.",
    "pivot()": "데이터를 변형하여 다른 차원으로 재구성하는 함수로, 피벗 테이블을 생성할 때 사용됩니다.",
    "뉴런 (Neuron)": "딥러닝에서 신경망의 기본 단위로, 입력을 받아 가중치를 적용한 후 활성화 함수를 통해 출력을 생성하는 구조입니다.",
    "가중치 (Weight)": "입력 데이터가 뉴런을 통과할 때 곱해지는 값으로, 학습을 통해 최적의 가중치를 찾아가는 과정이 딥러닝의 핵심입니다.",
    "편향 (Bias)": "뉴런의 활성화를 결정하는 데 사용되는 추가적인 매개변수로, 모델이 학습하는 기준을 조정하는 역할을 합니다.",
    "활성화 함수 (Activation Function)": "뉴런의 출력 값을 비선형으로 변환하는 함수로, 대표적인 활성화 함수에는 ReLU, Sigmoid, Tanh 등이 있습니다.",
    "역전파 (Backpropagation)": "출력에서 발생한 오차를 역으로 전파하여 가중치와 편향을 업데이트하는 알고리즘으로, 딥러닝 학습의 핵심 과정입니다.",
    "학습률 (Learning Rate)": "모델이 학습할 때 가중치 업데이트의 크기를 결정하는 하이퍼파라미터로, 값이 너무 크면 학습이 불안정하고, 너무 작으면 학습이 느려집니다.",
    "손실 함수 (Loss Function)": "모델이 예측한 값과 실제 값의 차이를 계산하여, 모델이 얼마나 틀렸는지 측정하는 함수입니다. 손실을 최소화하는 것이 모델 학습의 목표입니다.",
    "경사하강법 (Gradient Descent)": "손실 함수를 최소화하기 위해 가중치를 업데이트하는 최적화 알고리즘으로, 경사(기울기)를 따라 내려가며 최적의 값을 찾습니다.",
    "에포크 (Epoch)": "전체 훈련 데이터를 한 번 학습하는 과정입니다. 여러 번의 에포크를 거치면서 모델의 성능이 향상됩니다.",
    "배치 (Batch)": "모델 학습 시 한 번에 처리되는 데이터의 묶음입니다. 전체 데이터를 한 번에 처리하지 않고, 배치 단위로 나누어 학습합니다.",
    "미니배치 (Mini-Batch)": "전체 데이터를 여러 작은 배치로 나누어 학습하는 방법입니다. 미니배치 경사하강법은 메모리 효율성을 높이고 학습 속도를 향상시킵니다.",
    "드롭아웃 (Dropout)": "과적합을 방지하기 위해 학습 과정에서 무작위로 뉴런을 제거하는 정규화 기법입니다.",
    "과적합 (Overfitting)": "모델이 훈련 데이터에 너무 맞춰져서, 새로운 데이터에 대한 성능이 떨어지는 현상입니다.",
    "정규화 (Normalization)": "데이터의 범위를 일정하게 맞추는 작업으로, 학습을 원활하게 하기 위해 입력 데이터를 표준화하거나 정규화합니다.",
    "컨볼루션 (Convolution)": "CNN(합성곱 신경망)에서 입력 데이터의 특징을 추출하는 연산으로, 이미지 처리에 주로 사용됩니다.",
    "풀링 (Pooling)": "CNN에서 입력 데이터의 크기를 줄이는 작업으로, 최대 풀링(Max Pooling)과 평균 풀링(Average Pooling)이 있습니다.",
    "합성곱 신경망 (CNN)": "이미지나 시계열 데이터와 같은 구조적 데이터를 처리하는 데 사용되는 신경망입니다.",
    "순환 신경망 (RNN)": "시간에 따라 변하는 데이터(시계열 데이터)를 처리하기 위해 고안된 신경망으로, 입력 데이터의 순서를 고려합니다.",
    "장단기 메모리 (LSTM)": "RNN의 한 종류로, 장기 의존성 문제를 해결하기 위해 고안된 구조입니다. 과거의 중요한 정보를 기억하고, 필요 없어진 정보는 잊습니다.",
    "인공 신경망 (ANN)": "인간의 뇌 구조를 모방한 기계 학습 모델로, 여러 층의 뉴런을 연결하여 학습을 수행합니다.",
    "텐서 (Tensor)": "딥러닝에서 사용되는 기본 데이터 구조로, 다차원 배열을 의미합니다.",
    "전이 학습 (Transfer Learning)": "이미 학습된 모델을 기반으로 새로운 문제에 적용하는 방법으로, 적은 데이터로도 높은 성능을 얻을 수 있습니다.",
    "GPU (Graphics Processing Unit)": "대규모 병렬 처리가 가능한 장치로, 딥러닝 모델을 빠르게 학습하기 위해 주로 사용됩니다.",
    "파라미터 (Parameter)": "모델이 학습하는 과정에서 업데이트되는 값으로, 가중치와 편향이 포함됩니다.",
    "훈련 데이터 (Training Data)": "머신러닝 모델을 학습시키기 위한 데이터입니다. 모델은 이 데이터를 이용해 패턴을 학습합니다.",
    "테스트 데이터 (Test Data)": "모델의 성능을 평가하기 위해 훈련 데이터와는 별도로 사용하는 데이터입니다. 모델이 학습한 내용을 일반화하는지 평가합니다.",
    "특성 (Feature)": "모델이 예측에 사용하는 입력 변수입니다. 예를 들어, 집값을 예측하는 모델에서 면적과 방 개수가 특성이 될 수 있습니다.",
    "레이블 (Label)": "모델이 예측해야 하는 정답 또는 목표값입니다. 예를 들어, 주택 가격을 예측하는 문제에서는 집값이 레이블이 됩니다.",
    "검증 데이터 (Validation Data)": "모델의 과적합을 방지하기 위해 훈련 도중에 성능을 평가하는 데이터입니다. 훈련 데이터와는 별도로 사용됩니다.",
    "교차 검증 (Cross-Validation)": "데이터를 여러 개의 폴드로 나눈 뒤, 각 폴드에 대해 모델을 학습하고 평가하는 방법입니다. 이를 통해 모델의 일반화 성능을 평가합니다.",
    "혼동 행렬 (Confusion Matrix)": "분류 문제에서 모델의 예측 성능을 평가하는 표입니다. True Positive, False Positive, True Negative, False Negative를 한눈에 볼 수 있습니다.",
    "정확도 (Accuracy)": "모델의 예측 중에서 실제로 맞춘 예측의 비율을 나타냅니다. 하지만 클래스 불균형이 있을 때는 적절한 평가 지표가 아닐 수 있습니다.",
    "F1 스코어 (F1 Score)": "정밀도와 재현율의 조화평균으로, 클래스 불균형 문제에서 모델의 성능을 평가할 때 유용합니다.",
    "k-최근접 이웃 (k-NN)": "새로운 데이터를 분류할 때 가장 가까운 k개의 이웃 데이터를 참고하여 분류하는 알고리즘입니다.",
    "서포트 벡터 머신 (SVM)": "데이터를 분류하는 초평면을 찾아내는 지도학습 알고리즘입니다. 마진이 최대가 되는 초평면을 찾습니다.",
    "딥러닝 (Deep Learning)": "인공신경망을 기반으로 한 머신러닝 기법으로, 여러 층의 뉴런을 통해 복잡한 데이터를 학습할 수 있습니다.",
    "백프로파게이션 (Backpropagation)": "신경망에서 오류를 역방향으로 전파하여 가중치를 업데이트하는 방법입니다. 경사하강법을 사용합니다.",
    "신경망 (Neural Network)": "인간의 뇌 구조에서 영감을 얻은 알고리즘으로, 여러 층의 뉴런을 연결하여 데이터의 복잡한 패턴을 학습합니다.",
    "클러스터링 (Clustering)": "비지도 학습의 일종으로, 데이터를 유사한 그룹으로 묶는 작업입니다. K-Means가 대표적인 클러스터링 알고리즘입니다."
}