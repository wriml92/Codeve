{
  "topic_id": "loops",
  "topic_name": "반복문",
  "content": "## 입력\n```json\n{\n    \"theory_content\": \"반복문은 운동 시에 세트를 수행하는 것에 비유할 수 있어요. 예를 들어, 당신이 푸시업을 10번 반복하는 세트를 3번 수행하는 상황을 생각해보세요. 이것은 푸시업을 총 30번 반복하는 것이지만, 당신은 그것을 3개의 세트로 나누어 수행합니다. 이것이 바로 반복문이 하는 일입니다.\",\n    \"practice_content\": \"for i in range(3):  # 3 세트 반복\\n    for j in range(10):  # 각 세트에 10번의 푸시업 반복\\n        print(\\\"푸시업\\\")\\n# 출력 결과: {푸시업, 푸시업, ..., 푸시업} 총 30번 출력\",\n    \"topic\": \"반복문\"\n}\n```\n\n## 출력\n```html\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-bold mb-4\">퀴즈 1: 개념 이해</h2>\n    <p class=\"mb-4\">반복문이 세트 운동에 비유된다면, 'range(3)'과 'range(10)'은 각각 어떤 운동 요소에 해당하는가?</p>\n    <ol class=\"list-decimal list-inside space-y-2 mb-4\">\n        <li>'range(3)'은 3번의 푸시업, 'range(10)'은 10번의 세트를 의미한다.</li>\n        <li>'range(3)'은 3번의 세트, 'range(10)'은 세트당 10번의 푸시업을 의미한다.</li>\n        <li>'range(3)'은 3초 동안의 운동, 'range(10)'은 10회의 휴식을 의미한다.</li>\n    </ol>\n    <div class=\"hidden\">정답: 2. 'range(3)'은 3번의 세트, 'range(10)'은 세트당 10번의 푸시업을 의미한다.</div>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-bold mb-4\">퀴즈 2: 코드 분석</h2>\n    <p class=\"mb-4\">아래 코드가 실행되었을 때, 출력 결과는 무엇인가요?</p>\n    <div class=\"bg-gray-900 rounded-lg p-4 mb-4\">\n        <pre class=\"text-white font-mono text-sm\">\nfor i in range(5):  \n    for j in range(i):  \n        print(\"푸시업\")\n        </pre>\n    </div>\n    <div class=\"hidden\">정답: '푸시업'이 총 10번 출력된다. 'i'값이 0에서 4로 증가하면서, 각 'i'값만큼 '푸시업'이 출력되기 때문이다.</div>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-bold mb-4\">퀴즈 3: 코드 구현</h2>\n    <p class=\"mb-4\">당신은 운동 관리 앱을 만들고 있습니다. 사용자가 입력한 운동 세트 수와 세트당 반복 횟수를 받아, 해당 운동을 몇 번 해야 하는지 출력하는 파이썬 코드를 작성해보세요.</p>\n    <div class=\"bg-gray-900 rounded-lg p-4 mb-4\">\n        <pre class=\"text-white font-mono text-sm\">\n# 코드를 작성하세요.\n        </pre>\n    </div>\n    <div class=\"hidden\">\n        테스트 케이스:\n        입력: 5, 10\n        출력: \"당신은 총 50번의 운동을 해야합니다.\"\n        \n        입력: 3, 7\n        출력: \"당신은 총 21번의 운동을 해야합니다.\"\n        \n        정답 예시:\n        <pre class=\"text-white font-mono text-sm\">\nsets = int(input(\"세트 수를 입력하세요: \"))\nreps = int(input(\"세트당 반복 횟수를 입력하세요: \"))\ntotal = sets * reps\nprint(\"당신은 총\", total, \"번의 운동을 해야합니다.\")\n        </pre>\n    </div>\n</section>\n```",
  "course_id": "python",
  "theory_based_on": "```html\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">[개념 소개]</h2>\n    <p class=\"text-gray-800 leading-relaxed\">\n        반복문은 이름에서도 알 수 있듯이, 특정 작업을 반복적으로 수행하는데 사용되는 프로그래밍 구조에요. 특정 조건이 충족되는 동안 코드를 반복하거나, 리스트나 튜플 등의 순회 가능한 객체의 모든 항목에 대해 동일한 작업을 수행하는 데 사용됩니다.\n    </p>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">[비유]</h2>\n    <p class=\"text-gray-800 leading-relaxed\">\n        반복문은 운동 시에 세트를 수행하는 것에 비유할 수 있어요. 예를 들어, 당신이 푸시업을 10번 반복하는 세트를 3번 수행하는 상황을 생각해보세요. 이것은 푸시업을 총 30번 반복하는 것이지만, 당신은 그것을 3개의 세트로 나누어 수행합니다. 이것이 바로 반복문이 하는 일입니다. \n    </p>\n    <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n        <pre class=\"text-white font-mono text-sm\">\nfor i in range(3):  # 3 세트 반복\n    for j in range(10):  # 각 세트에 10번의 푸시업 반복\n        print(\"푸시업\")\n        </pre>\n        <p class=\"text-green-400 mt-2\"># 출력 결과: {푸시업, 푸시업, ..., 푸시업} 총 30번 출력</p>\n    </div>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">[핵심 포인트]</h2>\n    <ul class=\"list-disc list-inside space-y-2 text-gray-800\">\n        <li>반복문은 주로 'for' 또는 'while' 키워드를 사용하여 작성합니다. 예를 들어, 'for i in range(10):'은 0부터 9까지의 숫자에 대해 반복문을 실행합니다.</li>\n        <li>반복문 안에 다른 반복문을 넣을 수 있습니다. 이를 '중첩 반복문'이라고 합니다. 예를 들어, 'for i in range(3): for j in range(3):'은 총 9번의 반복을 수행합니다.</li>\n        <li>반복문을 제어하기 위해 'break'와 'continue'를 사용할 수 있습니다. 'break'는 반복문을 완전히 중단하고, 'continue'는 현재 반복을 건너뛰고 다음 반복을 시작합니다.</li>\n    </ul>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold mb-3\">주의사항</h2>\n    <ul class=\"list-decimal list-inside space-y-2 text-gray-800\">\n        <li>무한 반복에 주의해야 합니다. 조건이 항상 참인 'while' 반복문은 무한히 반복되므로, 반복문이 종료되는 조건을 반드시 설정해야 합니다.</li>\n        <li>반복문의 복잡성에 주의해야 합니다. 중첩 반복문은 코드의 복잡성을 높이므로, 필요한 경우에만 사용해야 합니다.</li>\n        <li>'break'와 'continue'는 조심해서 사용해야 합니다. 이들은 코드의 흐름을 복잡하게 만들 수 있으므로, 불필요한 사용을 피하는 것이 좋습니다.</li>\n    </ul>\n</section>\n```",
  "practice_based_on": "## 입력\n```json\n{\n    \"theory_content\": \"<section class=\\\"mb-8\\\">\\n<h2 class=\\\"text-lg font-semibold text-purple-600 mb-3\\\">[개념 소개]</h2>\\n<p class=\\\"text-gray-800 leading-relaxed\\\">\\n반복문은 이름에서도 알 수 있듯이, 특정 작업을 반복적으로 수행하는데 사용되는 프로그래밍 구조에요. 특정 조건이 충족되는 동안 코드를 반복하거나, 리스트나 튜플 등의 순회 가능한 객체의 모든 항목에 대해 동일한 작업을 수행하는 데 사용됩니다.\\n</p>\\n</section>\\n\\n<section class=\\\"mb-8\\\">\\n<h2 class=\\\"text-lg font-semibold text-purple-600 mb-3\\\">[비유]</h2>\\n<p class=\\\"text-gray-800 leading-relaxed\\\">\\n반복문은 운동 시에 세트를 수행하는 것에 비유할 수 있어요. 예를 들어, 당신이 푸시업을 10번 반복하는 세트를 3번 수행하는 상황을 생각해보세요. 이것은 푸시업을 총 30번 반복하는 것이지만, 당신은 그것을 3개의 세트로 나누어 수행합니다. 이것이 바로 반복문이 하는 일입니다. \\n</p>\\n<div class=\\\"bg-gray-900 rounded-lg p-4 mt-4\\\">\\n<pre class=\\\"text-white font-mono text-sm\\\">\\nfor i in range(3):  # 3 세트 반복\\nfor j in range(10):  # 각 세트에 10번의 푸시업 반복\\nprint(\\\"푸시업\\\")\\n</pre>\\n<p class=\\\"text-green-400 mt-2\\\"># 출력 결과: {푸시업, 푸시업, ..., 푸시업} 총 30번 출력</p>\\n</div>\\n</section>\\n\\n<section class=\\\"mb-8\\\">\\n<h2 class=\\\"text-lg font-semibold text-purple-600 mb-3\\\">[핵심 포인트]</h2>\\n<ul class=\\\"list-disc list-inside space-y-2 text-gray-800\\\">\\n<li>반복문은 주로 'for' 또는 'while' 키워드를 사용하여 작성합니다. 예를 들어, 'for i in range(10):'은 0부터 9까지의 숫자에 대해 반복문을 실행합니다.</li>\\n<li>반복문 안에 다른 반복문을 넣을 수 있습니다. 이를 '중첩 반복문'이라고 합니다. 예를 들어, 'for i in range(3): for j in range(3):'은 총 9번의 반복을 수행합니다.</li>\\n<li>반복문을 제어하기 위해 'break'와 'continue'를 사용할 수 있습니다. 'break'는 반복문을 완전히 중단하고, 'continue'는 현재 반복을 건너뛰고 다음 반복을 시작합니다.</li>\\n</ul>\\n</section>\\n\\n<section class=\\\"mb-8\\\">\\n<h2 class=\\\"text-lg font-semibold mb-3\\\">주의사항</h2>\\n<ul class=\\\"list-decimal list-inside space-y-2 text-gray-800\\\">\\n<li>무한 반복에 주의해야 합니다. 조건이 항상 참인 'while' 반복문은 무한히 반복되므로, 반복문이 종료되는 조건을 반드시 설정해야 합니다.</li>\\n<li>반복문의 복잡성에 주의해야 합니다. 중첩 반복문은 코드의 복잡성을 높이므로, 필요한 경우에만 사용해야 합니다.</li>\\n<li>'break'와 'continue'는 조심해서 사용해야 합니다. 이들은 코드의 흐름을 복잡하게 만들 수 있으므로, 불필요한 사용을 피하는 것이 좋습니다.</li>\\n</ul>\\n</section>\",\n    \"topic\": \"반복문\"\n}\n```\n\n## 출력\n```html\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">[실습 환경 설정]</h2>\n    <p class=\"text-gray-800 leading-relaxed\">\n        먼저, VSCode를 실행해주세요. VSCode가 아직 설치되어 있지 않다면 공식 웹사이트에서 다운로드하고 설치할 수 있어요. 파이썬이 설치되어 있지 않다면 Python 공식 웹사이트에서 다운로드하고 설치해주세요. 이제 VSCode에서 새로운 파일을 만들어 봅시다. 상단 메뉴에서 '파일' > '새 파일'을 선택하거나 단축키 Ctrl+N을 사용하면 됩니다.\n    </p>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">[이론 예제 실습]</h2>\n    <p class=\"text-gray-800 leading-relaxed\">\n        이제 이론에서 제시된 예제를 실습해볼까요? 푸시업 운동 세트를 반복하는 코드를 작성해봅시다. 아래 코드를 VSCode에 복사해 붙여넣기 해주세요.\n    </p>\n    <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n        <pre class=\"text-white font-mono text-sm\">\nfor i in range(3):  # 3 세트 반복\n    for j in range(10):  # 각 세트에 10번의 푸시업 반복\n        print(\"푸시업\")\n        </pre>\n    </div>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">[실행 방법]</h2>\n    <ol class=\"list-decimal list-inside space-y-4 text-gray-800\">\n        <li>VSCode에서 새 파일을 만들었다면, 이제 코드를 입력해봅시다. 이론에서 제시된 예제 코드를 복사해서 붙여넣기 해주세요.</li>\n        <li>코드를 입력했다면 이제 파일을 저장해야 합니다. '파일' > '다른 이름으로 저장'을 선택하거나 단축키 Ctrl+Shift+S를 눌러주세요. 파일 이름은 'pushup.py'로 해봅시다. '.py' 확장자는 파이썬 파일임을 나타냅니다.</li>\n        <li>파일을 저장했다면, 이제 코드를 실행해봅시다. 상단 메뉴에서 '보기' > '터미널'을 선택하면 터미널 창이 나타납니다. 터미널에 'python pushup.py'를 입력하고 엔터를 누르면, 코드가 실행됩니다.</li>\n    </ol>\n</section>\n```"
}