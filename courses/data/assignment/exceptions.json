{
  "topic_id": "exceptions",
  "topic_name": "예외처리",
  "content": "## 입력 예시\n```json\n{\n    \"theory_content\": \"이론에서 예외처리를 '계속 진행할 수 없는 상황이 발생했을 때, 그 상황을 처리하는 방법'으로 설명했습니다. 그리고 이를 '바퀴가 펑크 났을 때 스페어 타이어로 바꾸는 것'으로 비유했습니다.\",\n    \"practice_content\": \"실습에서는 try-except 구문을 사용해 예외를 처리하는 방법을 배웠습니다. 예를 들어, 리스트에서 존재하지 않는 인덱스를 참조하려고 할 때 발생하는 IndexError를 처리하는 코드를 작성했습니다.\",\n    \"topic\": \"예외처리\"\n}\n```\n\n## 출력 예시\n```html\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-bold mb-4\">퀴즈 1: 개념 이해</h2>\n    <p class=\"mb-4\">다음 중 예외처리에 대한 설명으로 옳지 않은 것은 무엇인가요?</p>\n    <ol class=\"list-decimal list-inside space-y-2 mb-4\">\n        <li>예외처리는 프로그램이 계속 실행될 수 있도록 돕는다.</li>\n        <li>예외처리는 프로그램에서 예기치 않은 상황을 대비하는 방법이다.</li>\n        <li>예외처리를 하면 프로그램의 실행 속도가 빨라진다.</li>\n        <li>예외처리는 바퀴가 펑크 났을 때 스페어 타이어로 바꾸는 것과 비슷하다.</li>\n    </ol>\n    <div class=\"hidden\">정답: 3. 예외처리는 프로그램의 안정성을 높이지만 실행 속도를 빨라지게 하지는 않는다.</div>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-bold mb-4\">퀴즈 2: 코드 분석</h2>\n    <p class=\"mb-4\">다음 코드를 실행했을 때 어떤 결과가 나올까요?</p>\n    <div class=\"bg-gray-900 rounded-lg p-4 mb-4\">\n        <pre class=\"text-white font-mono text-sm\">\ntry:\n    print(5 / 0)\nexcept ZeroDivisionError:\n    print('Cannot divide by zero.')\n        </pre>\n    </div>\n    <div class=\"hidden\">정답: 'Cannot divide by zero.'가 출력된다. 5를 0으로 나누려고 했기 때문에 ZeroDivisionError가 발생하고, 이를 예외 처리하여 해당 메시지가 출력된다.</div>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-bold mb-4\">퀴즈 3: 코드 구현</h2>\n    <p class=\"mb-4\">사용자로부터 숫자를 입력받아 그 숫자의 제곱근을 출력하는 코드를 작성하세요. 만약 사용자가 숫자가 아닌 문자를 입력하면 'Invalid input. Please enter a number.'라고 출력하세요.</p>\n    <div class=\"bg-gray-900 rounded-lg p-4 mb-4\">\n        <pre class=\"text-white font-mono text-sm\">\n# Your code here\n        </pre>\n    </div>\n    <div class=\"hidden\">\n        테스트 케이스:\n        - 입력: '25', 출력: '5.0'\n        - 입력: 'a', 출력: 'Invalid input. Please enter a number.'\n        정답 예시:\n        <pre class=\"text-white font-mono text-sm\">\ntry:\n    num = input('Enter a number: ')\n    print(float(num) ** 0.5)\nexcept ValueError:\n    print('Invalid input. Please enter a number.')\n        </pre>\n    </div>\n</section>\n```",
  "course_id": "python",
  "theory_based_on": "```html\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">예외 처리에 대한 소개</h2>\n    <p class=\"text-gray-800 leading-relaxed\">\n        예외 처리는 프로그램이 예상치 못한 상황이 발생했을 때, 프로그램이 완전히 중단되는 것을 방지하고 대신 적절한 조치를 취할 수 있도록 도와주는 방법입니다. 이를 통해 프로그램이 예상치 못한 입력이나 시스템 오류 등으로 인해 완전히 중단되는 대신, 오류를 알려주거나 복구할 수 있습니다.\n    </p>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">비유</h2>\n    <p class=\"text-gray-800 leading-relaxed\">\n        예외 처리는 자동차가 길을 달리다가 피해야 할 장애물을 만났을 때 브레이크를 밟고 멈추는 것과 비슷합니다. 이처럼 예외 처리는 프로그램이 '오류'라는 장애물을 만났을 때 완전히 멈추는 대신, 적절한 대응을 해서 안전하게 처리하는 것입니다. 자동차 운전의 예로 대체 비유를 든다면, 운전자가 길을 잘못 들어서 길을 잃었을 때, GPS를 통해 다시 올바른 길로 돌아가는 것과 비슷합니다.\n    </p>\n    <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n        <pre class=\"text-white font-mono text-sm\">\ntry:\n    print(10 / 0)\nexcept ZeroDivisionError:\n    print(\"0으로 나눌 수 없습니다.\")\n        </pre>\n        <p class=\"text-green-400 mt-2\"># 출력 결과: 0으로 나눌 수 없습니다.</p>\n    </div>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">핵심 포인트</h2>\n    <ul class=\"list-disc list-inside space-y-2 text-gray-800\">\n        <li>try-except 구문을 사용해 예외를 처리합니다. 'try' 블록에는 예외가 발생할 가능성이 있는 코드를, 'except' 블록에는 해당 예외를 처리하는 코드를 작성합니다. 예를 들어,\n<pre>\ntry:\n    print(10 / 0)\nexcept ZeroDivisionError:\n    print(\"0으로 나눌 수 없습니다.\")\n</pre>\n이 코드는 0으로 나누려는 시도를 하면, \"0으로 나눌 수 없습니다.\"라는 메시지를 출력합니다.</li>\n\n        <li>여러 개의 예외를 처리하려면 여러 개의 except 블록을 사용합니다. 예를 들어,\n<pre>\ntry:\n    list = [1, 2, 3]\n    print(list[5])\n    print(10 / 0)\nexcept ZeroDivisionError:\n    print(\"0으로 나눌 수 없습니다.\")\nexcept IndexError:\n    print(\"리스트의 범위를 벗어났습니다.\")\n</pre>\n이 코드는 0으로 나누는 오류와 리스트의 인덱스 범위를 벗어나는 오류 두 가지를 각각 처리합니다.</li>\n\n        <li>finally 블록은 예외 발생 여부와 관계없이 항상 실행되는 코드를 작성하는 데 사용됩니다. 예를 들어,\n<pre>\ntry:\n    print(10 / 0)\nexcept ZeroDivisionError:\n    print(\"0으로 나눌 수 없습니다.\")\nfinally:\n    print(\"이 부분은 항상 실행됩니다.\")\n</pre>\n이 코드는 0으로 나누는 오류가 발생하든, 발생하지 않든 상관없이 \"이 부분은 항상 실행됩니다.\"라는 메시지를 출력합니다.</li>\n    </ul>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold mb-3\">주의사항</h2>\n    <ul class=\"list-decimal list-inside space-y-2 text-gray-800\">\n        <li>except 블록을 여러 개 사용할 때는 가장 구체적인 예외부터 처리해야 합니다. 그렇지 않으면 더 구체적인 예외가 더 일반적인 예외에 의해 가려져서 제대로 처리되지 않을 수 있습니다.</li>\n        <li>try 블록 내에서 발생할 수 있는 모든 예외를 대비해서 적절한 except 블록을 작성해야 합니다. 그렇지 않으면 예상하지 못한 예외가 발생했을 때 프로그램이 중단될 수 있습니다.</li>\n        <li>finally 블록은 선택적으로 사용할 수 있지만, 반드시 실행되어야 하는 중요한 코드가 있다면 반드시 사용해야 합니다.</li>\n    </ul>\n</section>\n```",
  "practice_based_on": "## 입력\n```json\n{\n    \"theory_content\": \"예외 처리는 프로그램이 예상치 못한 상황이 발생했을 때, 프로그램이 완전히 중단되는 것을 방지하고 대신 적절한 조치를 취할 수 있도록 도와주는 방법입니다. 이를 통해 프로그램이 예상치 못한 입력이나 시스템 오류 등으로 인해 완전히 중단되는 대신, 오류를 알려주거나 복구할 수 있습니다. 예외 처리는 자동차가 길을 달리다가 피해야 할 장애물을 만났을 때 브레이크를 밟고 멈추는 것과 비슷합니다. 이처럼 예외 처리는 프로그램이 '오류'라는 장애물을 만났을 때 완전히 멈추는 대신, 적절한 대응을 해서 안전하게 처리하는 것입니다. 자동차 운전의 예로 대체 비유를 든다면, 운전자가 길을 잘못 들어서 길을 잃었을 때, GPS를 통해 다시 올바른 길로 돌아가는 것과 비슷합니다.\\n\\ntry:\\n    print(10 / 0)\\nexcept ZeroDivisionError:\\n    print(\\\"0으로 나눌 수 없습니다.\\\")\\n\\n# 출력 결과: 0으로 나눌 수 없습니다.\",\n    \"topic\": \"예외처리\"\n}\n```\n\n## 출력\n```html\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">실습 환경 설정</h2>\n    <p class=\"text-gray-800 leading-relaxed\">\n        VSCode를 사용하여 파이썬 코드를 작성하고 실행하는 방법을 안내해드릴게요. 먼저, VSCode를 실행합니다. 만약 VSCode가 설치되어 있지 않다면 공식 웹사이트(https://code.visualstudio.com/)에서 다운로드하고 설치할 수 있어요.\n    </p>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">이론 예제 실습</h2>\n    <p class=\"text-gray-800 leading-relaxed\">\n        이제 예외처리에 대한 이론 예제를 VSCode에서 실습해볼 차례입니다. 새 파일을 만들고, 아래에 제시된 예제 코드를 입력해주세요.\n    </p>\n    <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n        <pre class=\"text-white font-mono text-sm\">\ntry:\n    print(10 / 0)\nexcept ZeroDivisionError:\n    print(\"0으로 나눌 수 없습니다.\")\n        </pre>\n    </div>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">실행 방법</h2>\n    <ol class=\"list-decimal list-inside space-y-4 text-gray-800\">\n        <li>VSCode에서 새 파일을 만들어주세요. 상단 메뉴의 '파일' > '새 파일'을 선택하거나, 단축키 Ctrl+N을 사용하면 새 파일을 만들 수 있습니다.</li>\n        <li>새로 만든 파일에 위 예제 코드를 입력해주세요.</li>\n        <li>입력이 끝나면 파일을 저장해주세요. '파일' > '저장'을 선택하거나, 단축키 Ctrl+S를 사용하면 파일을 저장할 수 있습니다. 파일의 확장자는 '.py'로 해주세요.</li>\n        <li>코드를 실행해봅시다. 상단 메뉴의 '런' > '파일 실행'을 선택하거나, 단축키 Ctrl+Alt+N을 사용하면 코드를 실행할 수 있습니다. 실행 결과는 '터미널' 창에서 확인하실 수 있습니다.</li>\n    </ol>\n</section>\n```"
}