{
  "topic_id": "dictionaries",
  "topic_name": "딕셔너리",
  "content": "## 입력\n```json\n{\n    \"theory_content\": \"딕셔너리는 키와 값을 한 쌍으로 가지는 파이썬의 자료형입니다. 마치 사전에서 단어를 찾아봤을 때, 그 단어의 설명을 볼 수 있는 것처럼, 파이썬 딕셔너리에서는 키를 이용해 값을 찾을 수 있습니다. 딕셔너리의 키는 중복될 수 없으며, 값을 찾을 때는 해당 키를 통해 접근합니다.\",\n    \"practice_content\": \"다음은 학생들의 이름과 점수를 딕셔너리로 저장한 예제입니다.\\n\\n```python\\nscores = {'John': 85, 'Emily': 92, 'Thomas': 78}\\nprint(scores['Emily'])  # Emily의 점수를 출력\\n```\\n이 코드를 실행하면 '92'가 출력됩니다. 딕셔너리에서 'Emily'라는 키를 통해 접근하여 그에 해당하는 값인 92를 찾아 출력한 것입니다.\",\n    \"topic\": \"딕셔너리\"\n}\n```\n\n## 출력\n```html\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-bold mb-4\">퀴즈 1: 개념 이해</h2>\n    <p class=\"mb-4\">딕셔너리에서 키를 이용해 값을 찾을 때, 만약 해당 키가 딕셔너리에 없다면 어떤 결과가 나타날까요?</p>\n    <ol class=\"list-decimal list-inside space-y-2 mb-4\">\n        <li>해당 키와 연결된 기본값을 반환한다.</li>\n        <li>아무 값도 반환하지 않는다.</li>\n        <li>키가 없다는 오류 메시지를 반환한다.</li>\n        <li>딕셔너리가 비어있다는 메시지를 반환한다.</li>\n    </ol>\n    <div class=\"hidden\">정답: 3. 키가 없다는 오류 메시지를 반환한다.</div>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-bold mb-4\">퀴즈 2: 코드 분석</h2>\n    <p class=\"mb-4\">다음 코드의 실행 결과를 예측해보세요.</p>\n    <div class=\"bg-gray-900 rounded-lg p-4 mb-4\">\n        <pre class=\"text-white font-mono text-sm\">\n        people = {'Tom': 'Engineer', 'Jerry': 'Doctor'}\n        print(people['Spike'])\n        </pre>\n    </div>\n    <div class=\"hidden\">정답: 코드는 오류를 발생시킵니다. 'Spike'라는 키가 people 딕셔너리에 없기 때문에, 키 에러(KeyError)가 발생합니다.</div>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-bold mb-4\">퀴즈 3: 코드 구현</h2>\n    <p class=\"mb-4\">학생들의 이름과 점수를 입력받아 딕셔너리를 생성하는 코드를 작성해보세요. 그리고 특정 학생의 점수를 출력하는 함수를 추가해보세요.</p>\n    <div class=\"bg-gray-900 rounded-lg p-4 mb-4\">\n        <pre class=\"text-white font-mono text-sm\">\n        # 여기에 코드를 작성하세요.\n        </pre>\n    </div>\n    <div class=\"hidden\">\n        테스트 케이스:\n        입력: [('John', 85), ('Emily', 92), ('Thomas', 78)]\n        함수 호출: print_score('Emily')\n        출력: 92\n\n        정답 예시:\n        <pre class=\"text-white font-mono text-sm\">\n        def create_dictionary(students_scores):\n            return dict(students_scores)\n\n        def print_score(name):\n            scores = create_dictionary([('John', 85), ('Emily', 92), ('Thomas', 78)])\n            print(scores[name])\n        </pre>\n    </div>\n</section>\n```",
  "course_id": "python",
  "theory_based_on": "```html\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">개념 소개</h2>\n    <p class=\"text-gray-800 leading-relaxed\">\n        딕셔너리는 파이썬에서 제공하는 자료형 중 하나로, 키(key)와 값(value)의 쌍으로 데이터를 저장합니다. 각 키는 고유하며, 키를 통해 값을 검색할 수 있습니다. 딕셔너리는 중괄호 {}로 묶여 있으며 키와 값은 콜론(:)으로 연결되어 있습니다. 예를 들어, {'name': 'John', 'age': 27}와 같은 형태입니다.\n    </p>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">비유</h2>\n    <p class=\"text-gray-800 leading-relaxed\">\n        딕셔너리를 생각해보면, 사전이 떠오를 수 있겠죠. 사전에서 단어를 찾을 때, 단어가 키가 되고 그 단어의 뜻이 값이 되는 것입니다. 대체 비유로는 전화번호부를 생각해볼 수 있습니다. 이름이 키가 되고, 그 이름에 해당하는 전화번호가 값이 되는 구조입니다.\n    </p>\n    <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n        <pre class=\"text-white font-mono text-sm\">phone_book = {'John': '010-1234-5678', 'Jane': '010-9876-5432'}\nprint(phone_book['John'])</pre>\n        <p class=\"text-green-400 mt-2\"># 출력 결과: 010-1234-5678</p>\n    </div>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">핵심 포인트</h2>\n    <ul class=\"list-disc list-inside space-y-2 text-gray-800\">\n        <li>딕셔너리는 키와 값의 쌍으로 이루어진 데이터를 저장할 수 있습니다. 예: dict = {'key': 'value'}</li>\n        <li>딕셔너리에서 키를 통해 값을 검색할 수 있습니다. 예: print(dict['key'])  # 출력 결과: 'value'</li>\n        <li>딕셔너리의 키는 고유해야 합니다. 같은 키가 두 번 이상 있으면, 나중에 추가된 값만 유지됩니다. 예: dict = {'key': 'value1', 'key': 'value2'}  # dict['key']의 값은 'value2'</li>\n        <li>딕셔너리의 키에는 변경 불가능한 데이터 타입(문자열, 숫자, 튜플 등)만 사용할 수 있습니다.</li>\n    </ul>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold mb-3\">주의사항</h2>\n    <ul class=\"list-decimal list-inside space-y-2 text-gray-800\">\n        <li>딕셔너리의 키에는 변경 가능한 데이터 타입(리스트, 딕셔너리 등)을 사용하면 안 됩니다.</li>\n        <li>딕셔너리에 없는 키로 값을 찾으려고 하면 에러가 발생합니다. 이를 방지하려면 'in' 키워드를 사용해 키가 딕셔너리에 있는지 확인하거나, get() 메서드를 사용할 수 있습니다.</li>\n    </ul>\n</section>\n```",
  "practice_based_on": "## 입력\n```json\n{\n    \"theory_content\": \"딕셔너리를 생각해보면, 사전이 떠오를 수 있겠죠. 사전에서 단어를 찾을 때, 단어가 키가 되고 그 단어의 뜻이 값이 되는 것입니다. 대체 비유로는 전화번호부를 생각해볼 수 있습니다. 이름이 키가 되고, 그 이름에 해당하는 전화번호가 값이 되는 구조입니다. <pre class=\\\"text-white font-mono text-sm\\\">phone_book = {'John': '010-1234-5678', 'Jane': '010-9876-5432'}\\nprint(phone_book['John'])</pre><p class=\\\"text-green-400 mt-2\\\"># 출력 결과: 010-1234-5678</p>\",\n    \"topic\": \"딕셔너리\"\n}\n```\n\n## 출력\n```html\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">실습 환경 설정</h2>\n    <p class=\"text-gray-800 leading-relaxed\">\n        VSCode를 실행한 후, 상단 메뉴에서 \"파일\" -> \"새 파일\"을 선택하여 새로운 파일을 생성해주세요. 이 파일에서 우리는 실습을 진행할 겁니다. \n    </p>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">이론 예제 실습</h2>\n    <p class=\"text-gray-800 leading-relaxed\">\n        이제 이론에서 배운 딕셔너리 예제를 실습해볼 차례입니다. 먼저 아래의 코드를 복사하여 방금 생성한 파일에 붙여넣기 해주세요.\n    </p>\n    <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n        <pre class=\"text-white font-mono text-sm\">phone_book = {'John': '010-1234-5678', 'Jane': '010-9876-5432'}\nprint(phone_book['John'])</pre>\n    </div>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">실행 방법</h2>\n    <ol class=\"list-decimal list-inside space-y-4 text-gray-800\">\n        <li>코드를 입력한 후, 파일을 파이썬 파일로 저장합니다. \"파일\" -> \"다른 이름으로 저장\"을 선택하고, 파일 이름의 마지막에 \".py\"를 붙여주면 됩니다. 예를 들어, 파일 이름을 \"dict_example.py\"로 저장해보세요.</li>\n        <li>이제 코드를 실행해볼 차례입니다. 상단 메뉴의 \"Run\" -> \"Start Debugging\"을 선택하거나, 단축키 F5를 눌러 코드를 실행합니다.</li>\n        <li>VSCode 하단의 \"TERMINAL\" 창에서 코드의 실행 결과를 확인할 수 있습니다. \"010-1234-5678\"이라는 결과가 보이면 성공적으로 코드가 실행된 것입니다!</li>\n    </ol>\n</section>\n```"
}