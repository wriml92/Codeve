{
  "topic_id": "classes",
  "topic_name": "클래스",
  "content": "## 입력 예시\n```json\n{\n    \"theory_content\": \"클래스는 파이썬 등의 객체 지향 프로그래밍 언어에서 사용하는 개념입니다. 클래스는 '추상 데이터 타입'이라는 개념을 구현하는 방법 중 하나입니다. 클래스는 '초콜릿 공장'과 같습니다. 공장은 초콜릿을 만드는 방법(레시피)를 알고 있고, 이 방법을 사용해서 언제든지 새로운 초콜릿을 만들 수 있습니다. 클래스도 마찬가지로 객체를 만드는 '레시피'를 갖고 있습니다.\",\n    \"practice_content\": \"다음은 파이썬에서 클래스를 사용하는 방법의 예입니다.\\n\\n```python\\nclass Chocolate:\\n    def __init__(self, flavor, weight):\\n        self.flavor = flavor\\n        self.weight = weight\\n\\n    def eat(self):\\n        return f'You ate a {self.weight}g {self.flavor} chocolate.'\\n\\nchocolate1 = Chocolate('milk', 100)\\nprint(chocolate1.eat())\\n```\\n\\n이 코드를 실행하면 'You ate a 100g milk chocolate.'이라는 메시지가 출력됩니다.\",\n    \"topic\": \"클래스\"\n}\n```\n## 출력 예시\n```html\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-bold mb-4\">퀴즈 1: 개념 이해</h2>\n    <p class=\"mb-4\">클래스는 어떤 개념을 구현하는 방법 중 하나로, 어떤 것과 비교할 수 있을까요?</p>\n    <ol class=\"list-decimal list-inside space-y-2 mb-4\">\n        <li>자동차</li>\n        <li>초콜릿 공장</li>\n        <li>집</li>\n        <li>도서관</li>\n    </ol>\n    <div class=\"hidden\">정답: 2. 초콜릿 공장. 클래스는 객체를 생성하는 '레시피'를 갖고 있으므로, 초콜릿을 만드는 방법을 알고 있는 공장과 비교할 수 있습니다.</div>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-bold mb-4\">퀴즈 2: 코드 분석</h2>\n    <p class=\"mb-4\">다음 코드의 출력 결과를 예측해보세요.</p>\n    <div class=\"bg-gray-900 rounded-lg p-4 mb-4\">\n        <pre class=\"text-white font-mono text-sm\">class Chocolate:\n    def __init__(self, flavor, weight):\n        self.flavor = flavor\n        self.weight = weight\n\n    def eat(self):\n        return f'You ate a {self.weight}g {self.flavor} chocolate.'\n\nchocolate2 = Chocolate('dark', 150)\nprint(chocolate2.eat())</pre>\n    </div>\n    <div class=\"hidden\">정답: 'You ate a 150g dark chocolate.'이 출력됩니다. 'Chocolate' 클래스의 인스턴스 'chocolate2'를 생성하고, 그 인스턴스의 'eat' 메서드를 호출했기 때문입니다.</div>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-bold mb-4\">퀴즈 3: 코드 구현</h2>\n    <p class=\"mb-4\">클래스를 이용해 'Fruit'라는 클래스를 만들어보세요. 이 클래스는 'name'과 'color' 속성을 갖고, 'describe'라는 메서드를 갖습니다. 'describe' 메서드는 'This is a {color} {name}.' 형식의 문자열을 반환합니다.</p>\n    <div class=\"bg-gray-900 rounded-lg p-4 mb-4\">\n        <pre class=\"text-white font-mono text-sm\"># 여기에 코드를 작성하세요.</pre>\n    </div>\n    <div class=\"hidden\">\n        테스트 케이스:\n        - fruit = Fruit('apple', 'red')\n        - print(fruit.describe()) # 'This is a red apple.'이 출력되어야 합니다.\n        정답 예시:\n        ```python\n        class Fruit:\n            def __init__(self, name, color):\n                self.name = name\n                self.color = color\n\n            def describe(self):\n                return f'This is a {self.color} {self.name}.'\n        ```\n    </div>\n</section>\n```",
  "course_id": "python",
  "theory_based_on": "```html\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">클래스 소개</h2>\n    <p class=\"text-gray-800 leading-relaxed\">\n        클래스는 파이썬의 중요한 개념 중 하나로, 객체 지향 프로그래밍의 핵심 요소입니다. 클래스는 '설계도'와 같아요. 특정한 종류의 객체를 만들기 위한 틀이라고 생각하시면 됩니다. 예를 들어, 클래스를 이용해서 '자동차'라는 객체를 만들 수 있습니다. 이 '자동차' 클래스는 속성(색상, 브랜드, 최대 속도 등)과 메서드(달리기, 멈추기 등)를 가질 수 있습니다.\n    </p>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">클래스를 이해하기 위한 비유</h2>\n    <p class=\"text-gray-800 leading-relaxed\">\n        클래스를 '붕어빵 틀'에 비유해볼 수 있습니다. 붕어빵 틀을 사용하면 동일한 형태와 크기의 붕어빵을 만들 수 있죠. 여기서 붕어빵 틀이 바로 '클래스', 만들어진 붕어빵이 '객체'에 해당합니다. 또 다른 비유로는 '빵집의 빵 레시피'를 들 수 있습니다. 빵집에서 레시피대로 빵을 만들면 같은 종류의 빵을 계속 만들 수 있습니다. 이때 레시피가 클래스, 만들어진 빵이 객체입니다.\n    </p>\n    <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n        <pre class=\"text-white font-mono text-sm\">\nclass Car:\n    def __init__(self, color, brand):\n        self.color = color\n        self.brand = brand\n    \n    def drive(self):\n        print(f\"{self.color} {self.brand} is driving.\")\n\nmy_car = Car('Red', 'Ferrari')\nmy_car.drive()\n        </pre>\n        <p class=\"text-green-400 mt-2\"># 출력 결과: Red Ferrari is driving.</p>\n    </div>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">클래스의 핵심 포인트</h2>\n    <ul class=\"list-disc list-inside space-y-2 text-gray-800\">\n        <li>클래스는 객체를 생성하기 위한 '틀' 또는 '설계도'입니다.</li>\n        <li>클래스의 속성은 객체의 상태를, 메서드는 객체가 할 수 있는 행동을 정의합니다.</li>\n        <li>객체는 클래스를 이용해 생성하며, 각 객체는 독립적인 상태와 행동을 가집니다. 예를 들어, 'Car' 클래스로 만든 'my_car' 객체와 'your_car' 객체는 각각 다른 색상과 브랜드를 가질 수 있습니다.</li>\n    </ul>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold mb-3\">주의사항</h2>\n    <ul class=\"list-decimal list-inside space-y-2 text-gray-800\">\n        <li>클래스를 정의할 때는 클래스 이름의 첫 글자는 대문자로 작성하는 것이 좋습니다. 파이썬에서는 이렇게 하는 것이 관례입니다.</li>\n        <li>클래스의 메서드를 정의할 때는 첫 번째 매개변수로 'self'를 꼭 포함해야 합니다. 'self'는 메서드가 속한 객체를 가리키는 데 사용됩니다.</li>\n        <li>객체의 속성을 변경하거나 메서드를 호출할 때는 '객체이름.속성이름' 또는 '객체이름.메서드이름()' 형식을 사용합니다.</li>\n    </ul>\n</section>\n```",
  "practice_based_on": "## 입력\n```json\n{\n    \"theory_content\": \"클래스는 파이썬의 중요한 개념 중 하나로, 객체 지향 프로그래밍의 핵심 요소입니다. 클래스는 '설계도'와 같아요. 특정한 종류의 객체를 만들기 위한 틀이라고 생각하시면 됩니다. 예를 들어, 클래스를 이용해서 '자동차'라는 객체를 만들 수 있습니다. 이 '자동차' 클래스는 속성(색상, 브랜드, 최대 속도 등)과 메서드(달리기, 멈추기 등)를 가질 수 있습니다. 클래스를 '붕어빵 틀'에 비유해볼 수 있습니다. 붕어빵 틀을 사용하면 동일한 형태와 크기의 붕어빵을 만들 수 있죠. 여기서 붕어빵 틀이 바로 '클래스', 만들어진 붕어빵이 '객체'에 해당합니다. 또 다른 비유로는 '빵집의 빵 레시피'를 들 수 있습니다. 빵집에서 레시피대로 빵을 만들면 같은 종류의 빵을 계속 만들 수 있습니다. 이때 레시피가 클래스, 만들어진 빵이 객체입니다.\",\n    \"topic\": \"클래스\"\n}\n```\n\n## 출력\n```html\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">실습 환경 설정</h2>\n    <p class=\"text-gray-800 leading-relaxed\">\n        실습을 위한 첫 걸음은 VSCode(Visual Studio Code)를 실행하는 것입니다. VSCode를 아직 설치하지 않으셨다면, 공식 홈페이지에서 다운받아 설치해주세요. 설치가 완료되셨다면, VSCode를 실행한 후, 좌측의 Explorer 탭을 클릭하고 상단에 'New File' 아이콘을 클릭하여 새로운 파일을 생성해주세요.\n    </p>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">이론 예제 실습</h2>\n    <p class=\"text-gray-800 leading-relaxed\">\n        방금 만든 새 파일에 다음의 코드를 입력해주세요. 이 코드는 'Car'라는 클래스를 정의하고, 이 클래스로부터 'my_car'라는 객체를 만드는 예제입니다.\n    </p>\n    <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n        <pre class=\"text-white font-mono text-sm\">\nclass Car:\n    def __init__(self, color, brand):\n        self.color = color\n        self.brand = brand\n    \n    def drive(self):\n        print(f\"{self.color} {self.brand} is driving.\")\n\nmy_car = Car('Red', 'Ferrari')\nmy_car.drive()\n        </pre>\n    </div>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">실행 방법</h2>\n    <ol class=\"list-decimal list-inside space-y-4 text-gray-800\">\n        <li>VSCode에서 새 파일을 만들어주세요. (Ctrl+N 또는 좌측 상단의 'New File' 아이콘을 클릭)</li>\n        <li>위에서 제시된 예제 코드를 입력하세요.</li>\n        <li>파일을 저장해주세요. 이때 파일명은 'car.py'로 하시고, 확장자는 반드시 '.py'로 해주세요. (Ctrl+S 또는 상단 메뉴의 File > Save)</li>\n        <li>코드를 실행하세요. (상단 메뉴의 Run > Start Debugging 또는 F5키)</li>\n    </ol>\n</section>\n```"
}