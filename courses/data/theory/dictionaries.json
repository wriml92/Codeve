{
  "topic_id": "dictionaries",
  "topic_name": "딕셔너리",
  "content": "```html\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">개념 소개</h2>\n    <p class=\"text-gray-800 leading-relaxed\">\n        딕셔너리는 파이썬에서 제공하는 자료형 중 하나로, 키(key)와 값(value)의 쌍으로 데이터를 저장합니다. 각 키는 고유하며, 키를 통해 값을 검색할 수 있습니다. 딕셔너리는 중괄호 {}로 묶여 있으며 키와 값은 콜론(:)으로 연결되어 있습니다. 예를 들어, {'name': 'John', 'age': 27}와 같은 형태입니다.\n    </p>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">비유</h2>\n    <p class=\"text-gray-800 leading-relaxed\">\n        딕셔너리를 생각해보면, 사전이 떠오를 수 있겠죠. 사전에서 단어를 찾을 때, 단어가 키가 되고 그 단어의 뜻이 값이 되는 것입니다. 대체 비유로는 전화번호부를 생각해볼 수 있습니다. 이름이 키가 되고, 그 이름에 해당하는 전화번호가 값이 되는 구조입니다.\n    </p>\n    <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n        <pre class=\"text-white font-mono text-sm\">phone_book = {'John': '010-1234-5678', 'Jane': '010-9876-5432'}\nprint(phone_book['John'])</pre>\n        <p class=\"text-green-400 mt-2\"># 출력 결과: 010-1234-5678</p>\n    </div>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-purple-600 mb-3\">핵심 포인트</h2>\n    <ul class=\"list-disc list-inside space-y-2 text-gray-800\">\n        <li>딕셔너리는 키와 값의 쌍으로 이루어진 데이터를 저장할 수 있습니다. 예: dict = {'key': 'value'}</li>\n        <li>딕셔너리에서 키를 통해 값을 검색할 수 있습니다. 예: print(dict['key'])  # 출력 결과: 'value'</li>\n        <li>딕셔너리의 키는 고유해야 합니다. 같은 키가 두 번 이상 있으면, 나중에 추가된 값만 유지됩니다. 예: dict = {'key': 'value1', 'key': 'value2'}  # dict['key']의 값은 'value2'</li>\n        <li>딕셔너리의 키에는 변경 불가능한 데이터 타입(문자열, 숫자, 튜플 등)만 사용할 수 있습니다.</li>\n    </ul>\n</section>\n\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold mb-3\">주의사항</h2>\n    <ul class=\"list-decimal list-inside space-y-2 text-gray-800\">\n        <li>딕셔너리의 키에는 변경 가능한 데이터 타입(리스트, 딕셔너리 등)을 사용하면 안 됩니다.</li>\n        <li>딕셔너리에 없는 키로 값을 찾으려고 하면 에러가 발생합니다. 이를 방지하려면 'in' 키워드를 사용해 키가 딕셔너리에 있는지 확인하거나, get() 메서드를 사용할 수 있습니다.</li>\n    </ul>\n</section>\n```",
  "course_id": "python"
}