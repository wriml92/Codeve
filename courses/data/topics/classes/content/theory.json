{
  "content": "<!-- 1. 개념 소개 섹션 -->\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-black-600 mb-3\">개념 소개</h2>\n    <p class=\"text-gray-800 leading-relaxed\">\n        클래스라는 개념은 파이썬과 같은 객체 지향 프로그래밍에서 중요한 역할을 합니다. 클래스는 객체를 생성하기 위한 틀이나 설계도와 같은 것입니다. 객체는 데이터와 그 데이터를 조작하는 메소드를 포함할 수 있으며, 이러한 객체들이 모여 프로그램을 구성하게 됩니다. 클래스를 이용하면 동일한 행동 및 속성을 가진 객체를 여러 번 생성할 수 있어 코드의 재사용성을 높일 수 있습니다.\n    </p>\n</section>\n\n<!-- 2. 실생활 비유 섹션 -->\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-black-600 mb-3\">비유</h2>\n    <p class=\"text-gray-800 leading-relaxed\">\n        클래스를 이해하는 데 도움이 될 비유를 들어보겠습니다. 클래스는 '쿠키 틀'과 같다고 볼 수 있습니다. 쿠키 틀을 사용하면 같은 모양과 크기의 쿠키를 여러 개 만들 수 있죠. 여기서 쿠키 틀이 바로 클래스에 해당하며, 만들어진 쿠키 각각은 객체입니다. 각 쿠키(객체)는 동일한 속성(크기, 모양 등)을 가지지만, 각각 다른 상태를 가질 수 있습니다. \n    </p>\n    <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n        <pre class=\"text-white font-mono text-sm\">\n# 클래스 정의\nclass Cookie:\n    def __init__(self, flavor):\n        self.flavor = flavor  # 쿠키의 맛 설정\n\n    def show_flavor(self):\n        print(\"This cookie is\", self.flavor)\n\n# 객체 생성\nchoco_cookie = Cookie(\"chocolate\")\nvanilla_cookie = Cookie(\"vanilla\")\n\n# 메소드 사용\nchoco_cookie.show_flavor()\nvanilla_cookie.show_flavor()\n        </pre>\n        <p class=\"text-green-400 mt-2\"># 출력 결과: This cookie is chocolate <br># 출력 결과: This cookie is vanilla</p>\n    </div>\n</section>\n\n<!-- 3. 핵심 포인트 섹션 -->\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold text-black-600 mb-3\">핵심 포인트</h2>\n    <ul class=\"list-disc list-inside space-y-2 text-gray-800\">\n        <li>클래스는 객체의 '틀'이며, 객체는 클래스를 바탕으로 생성됩니다.</li>\n        <li>객체는 데이터와 그 데이터를 조작하는 메소드를 포함할 수 있습니다.</li>\n        <li>클래스를 이용하면 동일한 행동 및 속성을 가진 객체를 여러 번 생성할 수 있어 코드의 재사용성을 높일 수 있습니다.</li>\n    </ul>\n</section>\n\n<!-- 4. 주의사항 섹션 -->\n<section class=\"mb-8\">\n    <h2 class=\"text-lg font-semibold mb-3\">주의사항</h2>\n    <ul class=\"list-decimal list-inside space-y-2 text-gray-800\">\n        <li>클래스의 메소드를 정의할 때는 첫 번째 인자로 'self'를 꼭 포함해야 합니다. 'self'는 객체 자신을 가리킵니다. 이를 잊고 메소드를 정의하면 에러가 발생합니다.</li>\n        <li>객체의 속성에 직접 접근하는 대신, getter와 setter 같은 메소드를 통해 접근하는 것이 좋습니다. 이는 객체 지향 프로그래밍의 캡슐화 원칙을 지키는 방법입니다.</li>\n    </ul>\n</section>",
  "metadata": {
    "version": 1,
    "created_at": "2025-01-22T04:43:23.589660",
    "quality_score": 80.0
  }
}