{
  "assignments": [
    {
      "id": 1,
      "type": "theory_concept",
      "question": "Python에서 클래스를 정의할 때 사용하는 키워드는 무엇입니까?",
      "choices": [
        "class",
        "define",
        "function",
        "object"
      ],
      "correct_answer": 1,
      "explanation": "'class' 키워드는 Python에서 클래스를 정의할 때 사용됩니다.",
      "hint": "이 키워드는 객체 지향 프로그래밍의 기본 단위를 생성하기 위해 사용됩니다."
    },
    {
      "id": 2,
      "type": "metaphor",
      "question": "Python 클래스를 사용하는 것을 실생활의 어떤 것에 비유할 수 있습니까?",
      "choices": [
        "커피 레시피",
        "커피 잔",
        "커피 샵",
        "커피 원두"
      ],
      "correct_answer": 1,
      "explanation": "클래스는 '커피 레시피'에 비유할 수 있습니다. 레시피대로 여러 커피(객체)를 만들 수 있기 때문입니다.",
      "hint": "이것은 여러 객체를 만들기 위한 일종의 '틀' 또는 '설계도'입니다."
    },
    {
      "id": 3,
      "type": "concept",
      "question": "Python에서 클래스 내의 함수를 무엇이라고 합니까?",
      "choices": [
        "메소드",
        "프로시저",
        "함수",
        "콜백"
      ],
      "correct_answer": 1,
      "explanation": "클래스 내의 함수는 '메소드'라고 합니다.",
      "hint": "이 용어는 객체 지향 프로그래밍에서 클래스에 속한 함수를 지칭할 때 사용됩니다."
    },
    {
      "id": 4,
      "type": "analysis",
      "question": "다음 코드의 실행 결과는 무엇입니까?",
      "code_to_analyze": "class Car:\n    def __init__(self, color):\n        self.color = color\n\ndef main():\n    my_car = Car('blue')\n    print(my_car.color)\n\nmain()",
      "points_to_consider": [
        "__init__ 메소드의 역할",
        "클래스 인스턴스화 과정",
        "객체 속성 접근 방법"
      ],
      "sample_analysis": "이 코드는 'Car' 클래스를 정의하고, 이 클래스의 인스턴스인 'my_car'를 생성하여 'blue'라는 색깔을 할당한 뒤, 이 색깔을 출력합니다. 따라서 실행 결과는 'blue'입니다."
    },
    {
      "id": 5,
      "type": "implementation",
      "question": "Python에서 'Person' 클래스를 생성하고, 이름(name)과 나이(age)를 속성으로 갖도록 구현하세요. 또한, 개인 정보를 출력하는 'print_info' 메소드를 추가하세요.",
      "constraints": [
        "클래스 이름은 'Person'으로 합니다.",
        "'__init__' 메소드를 사용하여 속성을 초기화하세요."
      ],
      "test_cases": [
        {
          "input": "person = Person('John Doe', 30)\nperson.print_info()",
          "output": "Name: John Doe, Age: 30"
        },
        {
          "input": "person = Person('Jane Doe', 25)\nperson.print_info()",
          "output": "Name: Jane Doe, Age: 25"
        }
      ],
      "sample_solution": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def print_info(self):\n        print(f'Name: {self.name}, Age: {self.age}')",
      "hints": [
        "'__init__' 메소드는 클래스의 생성자입니다.",
        "'print_info' 메소드 내에서는 'self'를 사용하여 인스턴스 변수에 접근할 수 있습니다."
      ]
    }
  ]
}