{
  "assignments": [
    {
      "id": 1,
      "type": "concept_basic",
      "content": "클래스(class)의 정의는 무엇인가요?",
      "choices": [
        "데이터를 처리하기 위한 함수의 집합입니다.",
        "프로그램의 실행 순서를 결정하는 코드의 모음입니다.",
        "변수와 함수를 하나의 단위로 묶어서 관리하는 템플릿입니다.",
        "프로그램에서 발생하는 오류를 처리하는 코드의 집합입니다."
      ],
      "test_cases": null,
      "constraints": null
    },
    {
      "id": 2,
      "type": "concept_application",
      "content": "당신은 온라인 서점에서 책을 관리하는 프로그램을 만들고 있습니다. 책마다 제목, 저자, 출판년도와 같은 정보를 저장해야 합니다. 파이썬에서 이 정보를 효율적으로 관리하기 위해 어떻게 해야 할까요?",
      "choices": [
        "각 책의 정보를 리스트로 저장하고, 모든 책들의 리스트를 하나의 큰 리스트로 관리합니다.",
        "제목, 저자, 출판년도를 각각 다른 변수로 저장하고 책마다 이 변수들의 집합을 만듭니다.",
        "책 클래스를 정의하고, 각 책의 정보를 인스턴스 변수로 저장하는 책 객체를 생성합니다.",
        "모든 책의 정보를 하나의 문자열로 저장하고, 필요할 때마다 문자열을 분리해 정보를 얻습니다."
      ],
      "test_cases": null,
      "constraints": null
    },
    {
      "id": 3,
      "type": "concept_analysis",
      "content": "다음 코드를 실행하면 어떤 결과가 출력될까요?<br><br><code>class Dog:<br>&nbsp;&nbsp;&nbsp;&nbsp;def bark(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('Woof!')</code>",
      "choices": [
        "Woof!",
        "bark",
        "Dog",
        "에러가 발생합니다"
      ],
      "test_cases": null,
      "constraints": null
    },
    {
      "id": 4,
      "type": "concept_debug",
      "content": "다음 코드에서 발생하는 오류는 무엇일까요?<br><br><code>class Car:<br>&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.color = 'blue'</code>",
      "choices": [
        "클래스 선언이 잘못되었습니다",
        "__init__ 메소드에 self 매개변수가 없습니다",
        "self.color에 값을 할당할 수 없습니다",
        "__init__ 메소드가 매개변수를 받지 않아야 합니다"
      ],
      "test_cases": null,
      "constraints": null
    },
    {
      "id": 5,
      "type": "metaphor",
      "content": "프로그래밍에서 '클래스'를 식당의 레시피에 비유한다면, 객체(Object)는 무엇과 가장 유사할까요?",
      "choices": [
        "주방의 조리 도구",
        "식당에서 제공하는 특정 요리",
        "메뉴판에 나열된 요리 목록",
        "식재료를 구매하는 마켓"
      ],
      "test_cases": null,
      "constraints": null
    },
    {
      "id": 6,
      "type": "theory_concept",
      "content": "요리를 할 때 레시피에 따라 재료들을 조합하여 요리를 만듭니다. 여러분이 샐러드를 만들고 있다고 가정해봅시다.<br><br><code>class Salad:<br>&nbsp;&nbsp;&nbsp;def __init__(self, ingredients):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.ingredients = ingredients</code><br><br>위 코드의 결과는 실생활에서 무엇과 가장 비슷할까요?",
      "choices": [
        "레시피에 따라 샐러드 재료를 한데 모으는 행위",
        "식료품 가게에서 샐러드 재료를 구매하는 행위",
        "샐러드를 접시에 담아 서빙하는 행위",
        "식사를 마치고 설거지를 하는 행위"
      ],
      "test_cases": null,
      "constraints": null
    },
    {
      "id": 7,
      "type": "concept_synthesis",
      "content": "다음은 Python에서 클래스를 이용해 간단한 계산기를 만드는 코드의 일부입니다.<br><br><code>class Calculator:<br>&nbsp;&nbsp;&nbsp;&nbsp;def add(self, a, b):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return a + b<br>calc = Calculator()<br>result = calc.add(4, 5)<br>print(result)</code><br><br>이 코드에서 사용된 개념들의 올바른 설명은 무엇일까요?",
      "choices": [
        "Calculator 클래스는 'add'라는 메서드를 포함하고 있으며, 이 메서드는 객체가 생성된 후 두 숫자를 더하는 기능을 수행한다.",
        "'calc'는 'Calculator' 클래스의 함수를 호출하기 위한 배열(array)이다.",
        "print 함수는 새로운 Calculator 클래스를 만들기 위해 사용된다.",
        "'add'는 Python의 내장 함수로, 항상 두 숫자의 합을 반환한다."
      ],
      "test_cases": null,
      "constraints": null
    },
    {
      "id": 8,
      "type": "implementation_playground",
      "content": "아래에 있는 Python 클래스 코드를 실행해보고, 다음 지시 사항에 따라 코드를 조금씩 변경하여 결과가 어떻게 달라지는지 관찰해보세요. 이 코드는 간단한 'Book' 클래스를 정의하고 있으며, 책의 제목과 저자를 저장하고 출력하는 기능을 가지고 있습니다.\n\n```python\nclass Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n\n    def print_info(self):\n        print(f'Book: {self.title}, Author: {self.author}')\n\n# 책 객체 생성\nmy_book = Book('The Little Prince', 'Antoine de Saint-Exupéry')\n\n# 책 정보 출력\nmy_book.print_info()\n```\n\n1. 'The Little Prince'를 다른 책 제목으로 변경해보세요.\n2. 'Antoine de Saint-Exupéry'를 다른 저자 이름으로 변경해보세요.\n3. 'print_info' 함수 안의 출력 포맷을 변경해보세요 (예를 들어, 'Title -> Author:' 형식으로).\n4. 새로운 책 객체를 만들어서, 두 책의 정보를 차례대로 출력해보세요.",
      "choices": null,
      "test_cases": [
        {
          "input": "코드 실행 결과",
          "output": "Book: The Little Prince, Author: Antoine de Saint-Exupéry"
        },
        {
          "input": "my_book = Book('1984', 'George Orwell')\nmy_book.print_info()",
          "output": "Book: 1984, Author: George Orwell"
        },
        {
          "input": "class Book:\n    ...\n    def print_info(self):\n        print(f'Title -> Author: {self.title} -> {self.author}')\n\nmy_book.print_info()",
          "output": "Title -> Author: The Little Prince -> Antoine de Saint-Exupéry"
        },
        {
          "input": "new_book = Book('Brave New World', 'Aldous Huxley')\nmy_book.print_info()\nnew_book.print_info()",
          "output": "Book: The Little Prince, Author: Antoine de Saint-Exupéry\nBook: Brave New World, Author: Aldous Huxley"
        }
      ],
      "constraints": null
    },
    {
      "id": 9,
      "type": "implementation_modify",
      "content": "아래의 Python 코드는 'Person' 클래스를 정의하고 있습니다. 이 클래스는 사람의 이름과 나이를 속성으로 가지며, 자신을 소개하는 'introduce' 메서드를 가집니다. 그러나 'Person' 클래스의 정의가 완성되지 않아 'introduce' 메서드를 호출하면 오류가 발생합니다. 코드의 빈 부분을 채워 'Person' 클래스를 완성하고, 'introduce' 메서드가 작동하도록 해보세요.",
      "choices": null,
      "test_cases": [
        {
          "input": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def introduce(self):\n        return 'Hello, my name is ' + self.name + ' and I am ' + str(____) + ' years old.'\n\n# Person 인스턴스 생성\nperson1 = Person('Alice', 30)\nprint(person1.introduce())",
          "output": "Hello, my name is Alice and I am 30 years old."
        },
        {
          "input": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def introduce(self):\n        return 'My name is ' + self.name + ' and my age is ' + str(____) + '.'\n\n# 또 다른 Person 인스턴스 생성\nperson2 = Person('Bob', 22)\nprint(person2.introduce())",
          "output": "My name is Bob and my age is 22."
        }
      ],
      "constraints": null
    },
    {
      "id": 10,
      "type": "implementation_creative",
      "content": "당신은 'Pet Simulator' 게임의 개발자입니다. 플레이어가 자신의 애완동물을 생성하고, 이름을 부여하며, 애완동물이 기분이 좋은지 확인할 수 있는 코드를 작성해야 합니다. 이를 위해 'Pet' 클래스를 만들고, 간단한 메소드를 사용하여 애완동물의 상태를 확인하세요. 클래스 내에는 애완동물의 이름을 저장하는 변수와 기분을 확인하는 메소드가 있어야 합니다. 'happy' 메소드는 애완동물이 기분이 좋으면 '행복해!'를, 그렇지 않으면 '...지루해'를 반환해야 합니다. 모든 애완동물은 기본적으로 행복한 상태로 시작합니다.",
      "choices": null,
      "test_cases": [
        {
          "input": "my_pet = Pet('Buddy')\nprint(my_pet.name)\nprint(my_pet.happy())",
          "output": "Buddy\n행복해!"
        },
        {
          "input": "your_pet = Pet('Lucy')\nprint(your_pet.name)\nprint(your_pet.happy())",
          "output": "Lucy\n행복해!"
        }
      ],
      "constraints": null
    }
  ],
  "metadata": {
    "version": 1,
    "created_at": "2025-01-26T06:27:35.957592"
  }
}