{
  "assignments": [
    {
      "id": 1,
      "type": "concept_basic",
      "correct_answer": "3",
      "hint": "클래스는 객체 지향 프로그래밍에서 사용되며, 관련된 변수(속성)와 메소드(함수)를 그룹화하는 역할을 합니다."
    },
    {
      "id": 2,
      "type": "concept_application",
      "correct_answer": "3",
      "hint": "객체 지향 프로그래밍에서 클래스는 관련된 데이터와 메소드를 묶어서 객체의 청사진으로 사용됩니다. 책에 대한 정보를 관리하기 위해 클래스를 정의하고, 각 책마다 객체를 생성하여 정보를 저장하는 것이 효율적입니다."
    },
    {
      "id": 3,
      "type": "concept_analysis",
      "correct_answer": "4",
      "hint": "클래스를 정의했지만, 인스턴스를 생성하거나 메서드를 호출하지 않았습니다."
    },
    {
      "id": 4,
      "type": "concept_debug",
      "correct_answer": "2",
      "hint": "클래스의 __init__ 메소드는 객체가 생성될 때 자동으로 호출되는 특별한 메소드입니다. 이 메소드는 최소한 하나의 매개변수를 받아야 하는데, 그 매개변수는 객체 자신을 참조하는 self입니다. 코드에서 __init__ 메소드가 이 매개변수를 받고 있는지 확인해보세요."
    },
    {
      "id": 5,
      "type": "metaphor",
      "correct_answer": "2",
      "hint": "클래스는 객체의 설계도입니다. 식당에서 요리를 만들어내기 위해 레시피를 따르는 것처럼, 객체는 클래스에 정의된 속성과 메서드를 가진 인스턴스입니다."
    },
    {
      "id": 6,
      "type": "theory_concept",
      "correct_answer": "1",
      "hint": "이 코드는 'Salad'라는 클래스를 정의하고 있으며, '__init__' 메서드(생성자)는 샐러드를 만들 때 필요한 재료들을 초기 설정(모으는 것)하는 역할을 합니다."
    },
    {
      "id": 7,
      "type": "concept_synthesis",
      "correct_answer": "1",
      "hint": "Calculator 클래스는 각 인스턴스가 사용할 수 있는 기능(메서드)을 정의합니다. 'calc' 객체는 Calculator 클래스의 인스턴스이며, 'add' 메서드를 호출하여 두 숫자를 더합니다. 'print' 함수는 계산 결과를 출력합니다."
    },
    {
      "id": 8,
      "type": "implementation_playground",
      "test_cases": [
        {
          "input": "코드 실행 결과",
          "output": "Book: The Little Prince, Author: Antoine de Saint-Exupéry"
        },
        {
          "input": "my_book = Book('1984', 'George Orwell')\nmy_book.print_info()",
          "output": "Book: 1984, Author: George Orwell"
        },
        {
          "input": "class Book:\n    ...\n    def print_info(self):\n        print(f'Title -> Author: {self.title} -> {self.author}')\n\nmy_book.print_info()",
          "output": "Title -> Author: The Little Prince -> Antoine de Saint-Exupéry"
        },
        {
          "input": "new_book = Book('Brave New World', 'Aldous Huxley')\nmy_book.print_info()\nnew_book.print_info()",
          "output": "Book: The Little Prince, Author: Antoine de Saint-Exupéry\nBook: Brave New World, Author: Aldous Huxley"
        }
      ],
      "hint": "클래스는 데이터와 데이터를 처리하는 메서드를 함께 묶는 방법을 제공합니다. '__init__' 메소드는 객체가 생성될 때 호출되며, 객체의 초기 상태를 설정하는 데 사용됩니다. 객체의 메소드를 호출하면 해당 객체의 데이터에 대해 작업을 수행할 수 있습니다. 코드를 변경할 때, 객체의 속성을 변경하거나 메소드의 출력 포맷을 바꾸는 것은 객체의 상태나 행동을 변경하는 것입니다."
    },
    {
      "id": 9,
      "type": "implementation_modify",
      "test_cases": [
        {
          "input": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def introduce(self):\n        return 'Hello, my name is ' + self.name + ' and I am ' + str(____) + ' years old.'\n\n# Person 인스턴스 생성\nperson1 = Person('Alice', 30)\nprint(person1.introduce())",
          "output": "Hello, my name is Alice and I am 30 years old."
        },
        {
          "input": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def introduce(self):\n        return 'My name is ' + self.name + ' and my age is ' + str(____) + '.'\n\n# 또 다른 Person 인스턴스 생성\nperson2 = Person('Bob', 22)\nprint(person2.introduce())",
          "output": "My name is Bob and my age is 22."
        }
      ],
      "hint": "힌트: 빈 칸에 들어갈 내용은 'introduce' 메서드에서 'age' 속성을 문자열로 변환하여 연결하는 코드이며, 'self' 키워드를 사용합니다. 예를 들어, 'self.age'를 사용하여 'age' 속성에 접근할 수 있습니다."
    },
    {
      "id": 10,
      "type": "implementation_creative",
      "test_cases": [
        {
          "input": "my_pet = Pet('Buddy')\nprint(my_pet.name)\nprint(my_pet.happy())",
          "output": "Buddy\n행복해!"
        },
        {
          "input": "your_pet = Pet('Lucy')\nprint(your_pet.name)\nprint(your_pet.happy())",
          "output": "Lucy\n행복해!"
        }
      ],
      "hint": "힌트 내용:\n- 변수 'name': 애완동물의 이름을 저장합니다.\n- 메소드 'happy()': 애완동물의 기분 상태를 반환합니다 ('행복해!' 또는 '...지루해').\n- 코드 작성 순서: \n  1. 'Pet' 클래스를 정의하세요.\n  2. '__init__' 메소드를 사용하여 'name' 변수를 초기화하고, 애완동물이 행복하다고 가정하세요.\n  3. 'happy' 메소드를 정의하여 애완동물의 기분 상태를 반환하세요.\n  4. 'Pet' 클래스의 인스턴스를 생성하고, 애완동물의 이름과 기분 상태를 출력하세요."
    }
  ],
  "metadata": {
    "version": 1,
    "created_at": "2025-01-26T06:27:35.956917"
  }
}