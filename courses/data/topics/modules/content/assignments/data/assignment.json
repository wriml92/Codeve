{
  "assignments": [
    {
      "id": 1,
      "type": "concept_basic",
      "content": "모듈(module)의 정의는 무엇인가요?",
      "choices": [
        "프로그램 내에서 사용자의 입력을 받는 부분입니다.",
        "프로그램의 실행 결과를 화면에 출력하는 부분입니다.",
        "독립적 기능을 갖는 코드의 집합으로, 재사용이 가능하게 만든 것입니다.",
        "프로그래밍 언어에서 사용하는 변수의 이름을 지정하는 규칙입니다."
      ],
      "test_cases": null,
      "constraints": null
    },
    {
      "id": 2,
      "type": "concept_application",
      "content": "문제를 준비 중입니다.",
      "choices": [
        "준비 중",
        "준비 중",
        "준비 중",
        "준비 중"
      ],
      "test_cases": null,
      "constraints": null
    },
    {
      "id": 3,
      "type": "concept_analysis",
      "content": "다음 코드를 실행한 후, print 함수가 출력하는 결과는 무엇일까요?<br><br><code>number = 10<br>result = number % 3<br>print(result)</code>",
      "choices": [
        "1",
        "3",
        "0",
        "10"
      ],
      "test_cases": null,
      "constraints": null
    },
    {
      "id": 4,
      "type": "concept_debug",
      "content": "다음 코드에서 발생하는 오류는 무엇일까요?<br><br><code>import math<br>result = mats.sqrt(16)<br>print(result)</code>",
      "choices": [
        "math 모듈이 제대로 임포트되지 않았습니다",
        "sqrt 함수의 사용 방법이 잘못되었습니다",
        "print 함수의 사용 방법이 잘못되었습니다",
        "변수 result가 정의되지 않았습니다"
      ],
      "test_cases": null,
      "constraints": null
    },
    {
      "id": 5,
      "type": "metaphor",
      "content": "프로그래밍에서의 '모듈'을 일상생활의 어떤 것에 비유할 수 있을까요?",
      "choices": [
        "레고 블록을 조합하여 복잡한 구조를 만드는 것",
        "물을 한 컵에 부어서 마시는 것",
        "책 한 페이지를 빠르게 읽는 것",
        "창문을 통해 외부를 바라보는 것"
      ],
      "test_cases": null,
      "constraints": null
    },
    {
      "id": 6,
      "type": "theory_concept",
      "content": "당신은 카페에서 바리스타로 일하면서 다양한 커피 주문을 처리하고 있습니다. 하나의 주문이 들어왔고, 당신은 라떼 한 잔을 만들기 위해 에스프레소 샷과 우유를 준비해야 합니다.<br><br><code>espresso = 1<br>milk = 200<br>latte = espresso + milk</code><br><br>위 코드는 실생활의 어떤 상황과 가장 비슷할까요?",
      "choices": [
        "고객이 주문한 라떼를 만들기 위해 에스프레소 샷 한 개와 우유 200ml를 섞는 것",
        "에스프레소 샷 한 개와 우유 한 팩을 고객에게 따로 제공하는 것",
        "우유 200ml만 사용하여 라떼를 만드는 것",
        "에스프레소 샷 한 개를 마시고 우유 200ml를 따로 마시는 것"
      ],
      "test_cases": null,
      "constraints": null
    },
    {
      "id": 7,
      "type": "concept_synthesis",
      "content": "문제를 준비 중입니다.",
      "choices": [
        "준비 중",
        "준비 중",
        "준비 중",
        "준비 중"
      ],
      "test_cases": null,
      "constraints": null
    },
    {
      "id": 8,
      "type": "implementation_playground",
      "content": "아래에 제공된 코드는 'greetings' 모듈을 사용하여 다양한 인사말을 출력하는 프로그램입니다. 이 코드를 실행해보고, greeting 함수의 인자를 바꿔가며 출력되는 인사말이 어떻게 변하는지 관찰해보세요.",
      "choices": null,
      "test_cases": [
        {
          "input": "import greetings\n\ndef main():\n    print(greetings.say_hello('Alice'))\n    print(greetings.say_goodbye('Bob'))\n\nmain()",
          "output": "'Hello, Alice!'\n'Goodbye, Bob!'"
        },
        {
          "input": "import greetings\n\ndef main():\n    print(greetings.say_hello('Charlie'))\n    print(greetings.say_goodbye('Diana'))\n\nmain()",
          "output": "'Hello, Charlie!'\n'Goodbye, Diana!'"
        }
      ],
      "constraints": null
    },
    {
      "id": 9,
      "type": "implementation_modify",
      "content": "다음 파이썬 코드는 사용자가 입력한 두 개의 숫자를 더하는 기능을 하는 간단한 함수를 포함하고 있습니다. 빈 부분을 채워 두 숫자를 더하는 함수를 완성해보세요.",
      "choices": null,
      "test_cases": [
        {
          "input": "def add_numbers(num1, num2):\n    # 빈 부분\n    return result\n\n# 아래의 코드는 수정하지 마세요.\nprint(add_numbers(3, 4))",
          "output": "7"
        },
        {
          "input": "def add_numbers(num1, num2):\n    # 빈 부분\n    return result\n\n# 아래의 코드는 수정하지 마세요.\nprint(add_numbers(-1, 1))",
          "output": "0"
        }
      ],
      "constraints": null
    },
    {
      "id": 10,
      "type": "implementation_creative",
      "content": "당신은 방금 마법 학교에 입학한 신입생입니다. 학교의 전통으로 첫날에는 자신만의 마법 지팡이를 만들어야 합니다. 파이썬 코드를 사용하여 당신만의 마법 지팡이를 만들어 보세요. 다음 함수들을 사용해 시작해 보세요:\n\ncreate_wand(wood_type, core): 지팡이를 생성하는 함수로, wood_type(나무 종류)와 core(지팡이 핵심 재료)를 입력받습니다.\n\nenchant_wand(wand, spell): 지팡이에 주문을 부여하는 함수로, wand(지팡이)와 spell(주문)을 입력받습니다.\n\n당신의 첫 마법 지팡이를 만드는 코드를 3-4줄로 작성해 주세요.",
      "choices": null,
      "test_cases": [
        {
          "input": "my_wand = create_wand('Holly', 'Phoenix Feather')\nenchant_wand(my_wand, 'Lumos')",
          "output": "You've created a Holly wand with a Phoenix Feather core that glows when you cast Lumos!"
        },
        {
          "input": "my_wand = create_wand('Oak', 'Dragon Heartstring')\nenchant_wand(my_wand, 'Expelliarmus')",
          "output": "You've created an Oak wand with a Dragon Heartstring core that can disarm opponents with Expelliarmus!"
        }
      ],
      "constraints": null
    }
  ],
  "metadata": {
    "version": 1,
    "created_at": "2025-01-26T06:28:41.975593"
  }
}