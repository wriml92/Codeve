{
  "assignments": [
    {
      "id": 1,
      "type": "concept_basic",
      "correct_answer": "3",
      "hint": "모듈은 코드를 기능별로 나누어 관리하고 재사용하기 쉽게 만든 코드의 '묶음'을 의미합니다."
    },
    {
      "id": 2,
      "type": "concept_application",
      "correct_answer": "1",
      "hint": "준비 중입니다."
    },
    {
      "id": 3,
      "type": "concept_analysis",
      "correct_answer": "1",
      "hint": "이 코드에서 사용된 % 연산자는 나머지를 계산합니다. 예를 들어, 10을 3으로 나눈 나머지는 얼마일까요?"
    },
    {
      "id": 4,
      "type": "concept_debug",
      "correct_answer": "1",
      "hint": "해당 코드에서는 math 모듈의 sqrt 함수를 사용하려고 하나, 모듈 이름이 잘못 입력되어 있습니다. 모듈 이름이 정확히 입력되어야 해당 모듈의 함수를 사용할 수 있습니다."
    },
    {
      "id": 5,
      "type": "metaphor",
      "correct_answer": "1",
      "hint": "생각해보세요, 여러 부품을 조합하여 무언가를 구성할 때 각 부분은 어떤 역할을 하며 독립적으로도 존재할 수 있나요?"
    },
    {
      "id": 6,
      "type": "theory_concept",
      "correct_answer": "1",
      "hint": "코드에서의 '+' 연산자는 두 재료를 결합하는 것을 의미하며, 이는 실생활에서 재료를 혼합해 음료를 만드는 과정과 유사합니다."
    },
    {
      "id": 7,
      "type": "concept_synthesis",
      "correct_answer": "1",
      "hint": "준비 중입니다."
    },
    {
      "id": 8,
      "type": "implementation_playground",
      "test_cases": [
        {
          "input": "import greetings\n\ndef main():\n    print(greetings.say_hello('Alice'))\n    print(greetings.say_goodbye('Bob'))\n\nmain()",
          "output": "'Hello, Alice!'\n'Goodbye, Bob!'"
        },
        {
          "input": "import greetings\n\ndef main():\n    print(greetings.say_hello('Charlie'))\n    print(greetings.say_goodbye('Diana'))\n\nmain()",
          "output": "'Hello, Charlie!'\n'Goodbye, Diana!'"
        }
      ],
      "hint": "이 코드에서 'greetings'는 인사말을 출력하는 함수들을 가지고 있는 모듈입니다. 'say_hello' 함수는 인자로 받은 이름에 'Hello,'를 붙여서 반환하고, 'say_goodbye' 함수는 인자로 받은 이름에 'Goodbye,'를 붙여서 반환합니다. 'main' 함수 내에서 이 두 함수를 호출하여 인사말을 출력하고 있습니다. 'Alice', 'Bob', 'Charlie', 'Diana' 등의 이름을 바꿔보세요."
    },
    {
      "id": 9,
      "type": "implementation_modify",
      "test_cases": [
        {
          "input": "def add_numbers(num1, num2):\n    # 빈 부분\n    return result\n\n# 아래의 코드는 수정하지 마세요.\nprint(add_numbers(3, 4))",
          "output": "7"
        },
        {
          "input": "def add_numbers(num1, num2):\n    # 빈 부분\n    return result\n\n# 아래의 코드는 수정하지 마세요.\nprint(add_numbers(-1, 1))",
          "output": "0"
        }
      ],
      "hint": "빈 부분에는 두 매개변수 'num1'과 'num2'를 더하는 코드를 작성해야 합니다. 예를 들어, 'result = num1 + num2'와 같이 작성할 수 있습니다."
    },
    {
      "id": 10,
      "type": "implementation_creative",
      "test_cases": [
        {
          "input": "my_wand = create_wand('Holly', 'Phoenix Feather')\nenchant_wand(my_wand, 'Lumos')",
          "output": "You've created a Holly wand with a Phoenix Feather core that glows when you cast Lumos!"
        },
        {
          "input": "my_wand = create_wand('Oak', 'Dragon Heartstring')\nenchant_wand(my_wand, 'Expelliarmus')",
          "output": "You've created an Oak wand with a Dragon Heartstring core that can disarm opponents with Expelliarmus!"
        }
      ],
      "hint": "먼저 create_wand 함수를 사용하여 my_wand라는 변수에 당신의 지팡이를 만듭니다. 이 때, 나무 종류와 핵심 재료를 문자열 형태로 인자로 전달합니다. 만든 지팡이에 enchant_wand 함수를 사용하여 주문을 부여합니다. 주문도 문자열 형태로 전달하면 됩니다. \n\n사용할 수 있는 변수/함수 목록:\n- my_wand: 당신의 마법 지팡이를 저장할 변수\n- create_wand(wood_type, core): 지팡이 생성 함수\n- enchant_wand(wand, spell): 지팡이에 주문 부여 함수\n\n코드 작성 순서 가이드:\n1. create_wand 함수로 my_wand를 생성\n2. enchant_wand 함수로 my_wand에 주문을 부여\n3. (선택사항) 지팡이와 주문의 결과를 출력하기 위해 print 함수 사용"
    }
  ],
  "metadata": {
    "version": 1,
    "created_at": "2025-01-26T06:28:41.968808"
  }
}