{
  "assignments": [
    {
      "id": 1,
      "type": "concept_basic",
      "correct_answer": "1",
      "hint": "파일은 컴퓨터에서 정보를 영구적으로 저장하는 기본 단위입니다."
    },
    {
      "id": 2,
      "type": "concept_application",
      "correct_answer": "2",
      "hint": "파일을 새로 생성하고, 내용을 쓰기 위해서는 파일을 쓰기 모드로 열어야 합니다. 'w' 모드는 파일이 존재하지 않으면 새 파일을 생성하고, 존재하면 기존 내용을 지우고 새로 씁니다."
    },
    {
      "id": 3,
      "type": "concept_analysis",
      "correct_answer": "1",
      "hint": "이 코드는 텍스트 파일을 읽기 모드로 연 다음 파일의 모든 내용을 읽어서 출력하고 파일을 닫습니다."
    },
    {
      "id": 4,
      "type": "concept_debug",
      "correct_answer": "2",
      "hint": "파일을 읽을 때는 올바른 메소드를 사용해야 합니다. 메소드 이름을 정확히 기억하는 것이 중요합니다. 오타로 인해 프로그램이 예상하지 못한 방식으로 작동할 수 있습니다."
    },
    {
      "id": 5,
      "type": "metaphor",
      "correct_answer": "1",
      "hint": "파일은 정보를 저장하는 단위입니다."
    },
    {
      "id": 6,
      "type": "theory_concept",
      "correct_answer": "1",
      "hint": "준비 중입니다."
    },
    {
      "id": 7,
      "type": "concept_synthesis",
      "correct_answer": "3",
      "hint": "이 코드에서 'open' 함수는 파일을 여는 데 사용되며, 'r'은 읽기 모드를 의미합니다. 'read' 메서드는 파일의 내용을 읽어서 문자열로 반환합니다. 그리고 'print' 함수는 문자열을 콘솔에 출력합니다."
    },
    {
      "id": 8,
      "type": "implementation_playground",
      "test_cases": [
        {
          "input": "with open('example.txt', 'r') as file:\n    content = file.read()\nprint(content)",
          "output": "example.txt 파일의 내용이 출력됩니다."
        },
        {
          "input": "with open('example.txt', 'r') as file:\n    lines = file.readlines()\nfor line in lines:\n    print(line.strip())",
          "output": "example.txt 파일의 각 줄이 한 줄씩 출력됩니다, 줄바꿈 문자는 제거됩니다."
        }
      ],
      "hint": "with open(...) as file: 구문은 파일을 열고, 그 내용을 읽기 위해 사용됩니다. file.read()는 파일의 전체 내용을 읽어서 문자열로 반환합니다. file.readlines()는 파일의 각 줄을 리스트의 요소로 반환합니다. print(content)는 읽은 내용을 출력합니다. 또한, line.strip() 함수는 문자열에서 양 끝의 공백과 줄바꿈 문자를 제거합니다. 코드를 수정할 때, 'example.txt' 대신 다른 파일 이름으로 바꿔서 실행해보거나, print 함수 내부를 변경하여 다른 형식으로 내용을 출력해볼 수 있습니다."
    },
    {
      "id": 9,
      "type": "implementation_modify",
      "test_cases": [
        {
          "input": "filename = 'hello.txt'\ntext_to_write = '안녕하세요! 파일에 처음으로 글을 씁니다.'\n\n# 파일을 쓰기 모드로 열기\nwith open(filename, 'w') as file:\n    # 여기에 코드를 작성하세요\n\nprint(f'파일 {filename}이 생성되었고, 내용이 작성되었습니다.')",
          "output": "파일 hello.txt이 생성되었고, 내용이 작성되었습니다."
        },
        {
          "input": "filename = 'greeting.txt'\ntext_to_write = 'Hello, welcome to the file writing world!'\n\n# 파일을 쓰기 모드로 열기\nwith open(filename, 'w') as file:\n    # 여기에 코드를 작성하세요\n\nprint(f'파일 {filename}이 생성되었고, 내용이 작성되었습니다.')",
          "output": "파일 greeting.txt이 생성되었고, 내용이 작성되었습니다."
        }
      ],
      "hint": "파일 객체를 사용하여 'file.write(text_to_write)'와 같이 파일에 텍스트를 쓸 수 있습니다."
    },
    {
      "id": 10,
      "type": "implementation_creative",
      "test_cases": [
        {
          "input": "display_magic_pet('불사조', '새', '불을 다룹니다')",
          "output": "불사조 - 새: 불을 다룹니다\n"
        },
        {
          "input": "display_magic_pet('유니콘', '말', '치유의 힘을 가졌습니다')",
          "output": "유니콘 - 말: 치유의 힘을 가졌습니다\n"
        }
      ],
      "hint": "힌트 내용: \n- 사용할 수 있는 변수/함수: display_magic_pet(name, species, ability)\n- display_magic_pet 함수의 역할: 주어진 마법동물의 이름(name), 종류(species), 능력(ability)을 받아서 화면에 표시합니다.\n- 코드 작성 순서: display_magic_pet 함수를 호출하고, 필요한 정보를 인자로 전달하여 결과를 출력합니다. 예를 들어, display_magic_pet('드래곤', '용', '불을 뿜습니다') 라고 작성하면, 화면에 '드래곤 - 용: 불을 뿜습니다'와 같이 나타납니다."
    }
  ],
  "metadata": {
    "version": 1,
    "created_at": "2025-01-26T06:31:17.315168"
  }
}