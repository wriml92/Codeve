[
{
  "model": "courses.theorycontent",
  "pk": 1,
  "fields": {
    "topic_id": "input_output",
    "content": "<div class=\"space-y-8\">\n            <div class=\"space-y-8\">\n    <!-- 1. 개념 소개 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">개념 소개</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            파이썬은 프로그래밍 언어 중 하나로, 다양한 작업을 수행하기 위해 사용됩니다. 프로그래밍 언어는 사람이 컴퓨터에게 명령을 내리는 방법이고, 파이썬은 그 방법 중 하나입니다. 오늘 다룰 주제는 '입력과 출력'입니다. 컴퓨터 프로그램은 기본적으로 사용자로부터 데이터를 <b>입력</b>받아 처리하고, 그 결과를 다시 사용자에게 <b>출력</b>하는 구조를 가지고 있습니다. 파이썬에서는 <span style='color: #0066cc;'>input()</span> 함수를 이용해 사용자로부터 데이터를 입력받고, <span style='color: #0066cc;'>print()</span> 함수를 이용해 데이터를 출력합니다.\n        </p>\n    </section>\n\n    <!-- 2. 실생활 비유 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">비유</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            입력과 출력을 생각해보면, 우리 일상생활에서 흔히 볼 수 있는 자판기를 떠올릴 수 있습니다. 자판기는 사용자로부터 동전 입력(입력)을 받아, 그에 맞는 음료를 내보냅니다(출력). 또 다른 비유로는 레스토랑 주문도 있습니다. 웨이터는 손님으로부터 주문(입력)을 받아, 주방에서 음식을 만들고, 그 음식을 손님에게 가져다줍니다(출력).\n        </p>\n        <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n            <pre class=\"text-white font-mono text-sm\">name = input(\"당신의 이름은 무엇인가요?: \")  # 사용자로부터 이름 입력받기\nprint(\"안녕하세요, \" + name + \"님!\")  # 입력받은 이름을 이용해 메시지 출력</pre>\n            <p class=\"text-green-400 mt-2\"># 실행 결과: (사용자가 \"홍길동\"을 입력한 경우) 안녕하세요, 홍길동님!</p>\n        </div>\n    </section>\n\n    <!-- 3. 실생활 응용 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">실생활 응용</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            입력과 출력은 프로그래밍의 기본적인 구조를 이루며, 다양한 형태로 응용됩니다. 예를 들어, 웹 사이트에서는 사용자로부터 로그인 정보를 입력받아, 그에 따른 다양한 정보를 출력합니다. 또한, 쇼핑 앱에서는 사용자가 원하는 상품을 검색(입력)하면, 그에 맞는 상품 리스트를 보여줍니다(출력). 이처럼 입력과 출력은 우리가 프로그래밍을 통해 다양한 작업을 수행하는 데 있어 핵심적인 역할을 합니다.\n        </p>\n    </section>\n\n    <!-- 4. 핵심 포인트 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">핵심 포인트</h2>\n        <div class=\"space-y-4\">\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                파이썬에서는 <span style='color: #0066cc;'>input()</span> 함수를 이용해 사용자로부터 데이터를 입력받습니다. input 함수는 사용자가 입력한 내용을 문자열로 반환합니다.\n            </div>\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                파이썬에서는 <span style='color: #0066cc;'>print()</span> 함수를 이용해 데이터를 출력합니다. print 함수는 괄호 안의 내용을 화면에 출력합니다.\n            </div>\n        </div>\n    </section>\n\n    <!-- 5. 주의사항 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold mb-3\">주의사항</h2>\n        <ul class=\"list-decimal list-inside space-y-4\">\n            <li>\n                <div class=\"mb-2\">input 함수는 사용자가 입력한 값을 항상 문자열로 처리합니다. 따라서 숫자로 입력받아 계산하려면 별도로 형변환을 해주어야 합니다.</div>\n                <div class=\"space-y-2\">\n                    <div class=\"bg-red-50 p-3 rounded-lg border-l-4 border-red-500\">\n                        <div class=\"text-red-600 font-medium mb-1\">❌ 잘못된 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">num = input(\"숫자를 입력하세요: \")\nprint(num + 100)  # 오류 발생: 문자열과 숫자는 더할 수 없습니다.</pre>\n                    </div>\n                    <div class=\"bg-green-50 p-3 rounded-lg border-l-4 border-green-500\">\n                        <div class=\"text-green-600 font-medium mb-1\">✅ 올바른 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">num = int(input(\"숫자를 입력하세요: \"))  # 입력값을 정수로 변환\nprint(num + 100)  # 정상적으로 계산됩니다.</pre>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </section>\n</div>\n        </div>",
    "created_at": "2025-01-22T08:27:32.797Z",
    "updated_at": "2025-01-22T08:27:32.797Z"
  }
},
{
  "model": "courses.theorycontent",
  "pk": 2,
  "fields": {
    "topic_id": "variables",
    "content": "<div class=\"space-y-8\">\n            <div class=\"space-y-8\">\n    <!-- 1. 개념 소개 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">개념 소개</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            변수는 프로그래밍의 가장 기본적이면서 중요한 개념 중 하나입니다. 변수는 <b>데이터를 저장하고 참조하는 데 사용되는 식별자</b>라고 생각하면 됩니다. 다시 말해, 변수는 값을 담는 '상자'라고 생각할 수 있으며, 이 상자에는 어떠한 <span style='color: #0066cc;'>자료형</span>의 값이든 저장할 수 있습니다.\n        </p>\n    </section>\n\n    <!-- 2. 실생활 비유 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">비유</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            변수를 이해하는 데 도움이 될 만한 비유를 들어볼까요? 변수는 <b>이름표가 붙은 상자</b>와 비슷합니다. 상자 안에는 어떠한 물건이든 넣을 수 있고, 그 상자에 이름표를 붙여서 어떤 물건이 들어있는지 알 수 있죠. 프로그래밍에서도 변수에 값을 '넣는' 것을 <span style='color: #0066cc;'>할당</span>이라고 합니다.\n        </p>\n        <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n            <pre class=\"text-white font-mono text-sm\"># 변수에 값을 할당하는 예제\nmy_var = 10\nprint(my_var)  # my_var 변수에 저장된 값을 출력</pre>\n            <p class=\"text-green-400 mt-2\"># 실행 결과: 10</p>\n        </div>\n    </section>\n\n    <!-- 3. 실생활 응용 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">실생활 응용</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            변수는 프로그래밍의 거의 모든 곳에서 사용됩니다. 예를 들어, 사용자로부터 입력 받은 데이터를 저장하거나, 계산 결과를 저장하는 데 변수를 사용할 수 있습니다. 또한, 프로그램의 특정 부분에서 생성된 데이터를 다른 부분에서 참조할 때도 변수를 사용합니다.\n        </p>\n    </section>\n\n    <!-- 4. 핵심 포인트 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">핵심 포인트</h2>\n        <div class=\"space-y-4\">\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                변수는 데이터를 저장하고 참조하기 위한 식별자입니다. 변수에는 어떤 자료형의 값이든 저장할 수 있습니다.\n            </div>\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                변수에 값을 '넣는' 것을 '할당'이라고 하며, '=' 연산자를 사용합니다. 예: my_var = 10\n            </div>\n        </div>\n    </section>\n\n    <!-- 5. 주의사항 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold mb-3\">주의사항</h2>\n        <ul class=\"list-decimal list-inside space-y-4\">\n            <li>\n                <div class=\"mb-2\">변수 이름은 유일해야 합니다. 이미 사용 중인 변수 이름을 다시 사용하면 기존 변수의 값이 변경됩니다. 이 점을 주의해야 합니다.</div>\n                <div class=\"space-y-2\">\n                    <div class=\"bg-red-50 p-3 rounded-lg border-l-4 border-red-500\">\n                        <div class=\"text-red-600 font-medium mb-1\">❌ 잘못된 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\"># 이미 사용 중인 변수 이름을 다시 사용하는 경우\nx = 10\nx = 20\nprint(x)  # x의 최종 값은 무엇일까요?</pre>\n                    </div>\n                    <div class=\"bg-green-50 p-3 rounded-lg border-l-4 border-green-500\">\n                        <div class=\"text-green-600 font-medium mb-1\">✅ 올바른 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\"># 변수 이름을 유일하게 사용하는 경우\nx = 10\ny = 20\nprint(x, y)  # x와 y의 값은 각각 무엇일까요?</pre>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </section>\n</div>\n        </div>",
    "created_at": "2025-01-22T08:28:34.828Z",
    "updated_at": "2025-01-22T08:28:34.828Z"
  }
},
{
  "model": "courses.theorycontent",
  "pk": 3,
  "fields": {
    "topic_id": "strings",
    "content": "<div class=\"space-y-8\">\n            <div class=\"space-y-8\">\n    <!-- 1. 개념 소개 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">개념 소개</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            오늘 우리는 <b>문자열(strings)</b>에 대해서 배워볼 거에요. 문자열은 사실상 우리가 코딩에서 말하고자 하는 모든 '말'이라고도 할 수 있습니다. 예를 들어, '안녕하세요', '파이썬', 'Hello, world!' 등의 텍스트를 나타내는데 사용해요. 파이썬에서 문자열은 <span style='color: #0066cc;'>따옴표</span>로 둘러싸여 있어야 합니다. 그리고 이 따옴표는 작은 따옴표(')나 큰 따옴표(\") 모두 사용가능해요.\n        </p>\n    </section>\n\n    <!-- 2. 실생활 비유 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">비유</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            문자열을 일상생활의 비유로 이해해보면, 문자열은 마치 '함축된 메시지'와 같아요. 예를 들어, 친구에게 무슨 말을 하고 싶다면, 그 말을 텍스트 메시지로 작성하고 보내면 되죠. 이때, 텍스트 메시지 내용이 바로 문자열이라고 할 수 있습니다. \n        </p>\n        <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n            <pre class=\"text-white font-mono text-sm\">\n            # 문자열 변수 선언\n            message = \"Hello, Python!\"\n            # 문자열 출력\n            print(message)\n            </pre>\n            <p class=\"text-green-400 mt-2\"># 실행 결과: Hello, Python!</p>\n        </div>\n    </section>\n\n    <!-- 3. 실생활 응용 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">실생활 응용</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            문자열은 웹사이트 제작, 게임 개발, 데이터 분석 등 다양한 분야에서 사용되어요. 예를 들어, 웹사이트에서 사용자의 이름을 출력하거나, 게임에서 캐릭터의 대사를 표시하거나, 데이터 분석에서 텍스트 데이터를 처리하는 데 모두 문자열이 사용됩니다.\n        </p>\n    </section>\n\n    <!-- 4. 핵심 포인트 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">핵심 포인트</h2>\n        <div class=\"space-y-4\">\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                문자열은 텍스트를 나타내는 데 사용되며, 파이썬에서는 따옴표(' 또는 \")로 둘러싸여 있어야 합니다.\n            </div>\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                문자열은 다양한 분야에서 사용되며, 특히 텍스트 데이터를 다루는 데 필수적입니다.\n            </div>\n        </div>\n    </section>\n\n    <!-- 5. 주의사항 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold mb-3\">주의사항</h2>\n        <ul class=\"list-decimal list-inside space-y-4\">\n            <li>\n                <div class=\"mb-2\">문자열을 선언할 때는 반드시 따옴표를 사용해야 합니다. 따옴표 없이 문자열을 선언하려고 하면 오류가 발생합니다.</div>\n                <div class=\"space-y-2\">\n                    <div class=\"bg-red-50 p-3 rounded-lg border-l-4 border-red-500\">\n                        <div class=\"text-red-600 font-medium mb-1\">❌ 잘못된 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">message = Hello, Python!</pre>\n                    </div>\n                    <div class=\"bg-green-50 p-3 rounded-lg border-l-4 border-green-500\">\n                        <div class=\"text-green-600 font-medium mb-1\">✅ 올바른 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">message = \"Hello, Python!\"</pre>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </section>\n</div>\n        </div>",
    "created_at": "2025-01-22T08:33:27.840Z",
    "updated_at": "2025-01-22T08:33:27.840Z"
  }
},
{
  "model": "courses.theorycontent",
  "pk": 4,
  "fields": {
    "topic_id": "lists",
    "content": "<div class=\"space-y-8\">\n            <div class=\"space-y-8\">\n    <!-- 1. 개념 소개 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">개념 소개</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            파이썬의 <b>리스트</b>는 여러분이 쇼핑 리스트를 만들 때와 같이, 여러 가지 아이템을 한 곳에 모아 놓는 것을 생각하면 됩니다. \n            이러한 아이템들은 여러분이 원하는 순서대로 배열될 수 있으며, <span style='color: #0066cc;'>인덱스</span>라는 숫자를 통해 각각의 위치를 알 수 있습니다. \n            또한, 리스트에는 다양한 타입의 데이터(예: 문자열, 숫자, 다른 리스트 등)를 함께 저장할 수 있습니다.\n        </p>\n    </section>\n\n    <!-- 2. 실생활 비유 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">비유</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            리스트를 생각할 때, 책장을 떠올려 보세요. 책장에 여러분이 좋아하는 책들을 순서대로 배열합니다. \n            첫 번째 책, 두 번째 책, 세 번째 책이라고 부르며, 이 때의 '첫 번째', '두 번째' 등이 바로 인덱스에 해당합니다. \n            책장에는 소설, 시집, 과학책 등 다양한 종류의 책을 한꺼번에 보관할 수 있듯이, 리스트에도 다양한 타입의 데이터를 저장할 수 있습니다.\n        </p>\n        <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n            <pre class=\"text-white font-mono text-sm\">\n# 리스트 생성\nmy_list = ['apple', 'banana', 'cherry']\n\n# 인덱스를 사용해 아이템에 접근\nprint(my_list[0])  # 첫 번째 아이템\nprint(my_list[1])  # 두 번째 아이템\nprint(my_list[2])  # 세 번째 아이템\n            </pre>\n            <p class=\"text-green-400 mt-2\"># 실행 결과: apple, banana, cherry</p>\n        </div>\n    </section>\n\n    <!-- 3. 실생활 응용 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">실생활 응용</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            파이썬의 리스트는 데이터를 유연하게 관리할 수 있어 많은 상황에서 활용됩니다. 예를 들어, 여러분이 온라인 쇼핑을 할 때 장바구니에 상품을 담는 것을 생각해보세요. \n            장바구니에 담긴 상품들은 모두 리스트로 관리됩니다. 또는 여러분이 여행을 가기 위해 준비물 목록을 작성한다면, 이 목록도 리스트로 만들 수 있습니다.\n        </p>\n    </section>\n\n    <!-- 4. 핵심 포인트 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">핵심 포인트</h2>\n        <div class=\"space-y-4\">\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                리스트는 다양한 타입의 데이터를 순서대로 저장하며, 인덱스를 통해 각 아이템에 접근할 수 있습니다.\n            </div>\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                리스트는 데이터를 유연하게 관리할 수 있어 다양한 상황에서 활용됩니다.\n            </div>\n        </div>\n    </section>\n\n    <!-- 5. 주의사항 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold mb-3\">주의사항</h2>\n        <ul class=\"list-decimal list-inside space-y-4\">\n            <li>\n                <div class=\"mb-2\">파이썬의 리스트 인덱스는 0부터 시작합니다. 따라서 첫 번째 아이템에 접근하려면 [0]을, 두 번째 아이템에 접근하려면 [1]을 사용해야 합니다. 이 점을 잊고 1부터 시작하려고 하면 원하지 않는 결과를 얻게 됩니다.</div>\n                <div class=\"space-y-2\">\n                    <div class=\"bg-red-50 p-3 rounded-lg border-l-4 border-red-500\">\n                        <div class=\"text-red-600 font-medium mb-1\">❌ 잘못된 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">\n# 리스트 생성\nmy_list = ['apple', 'banana', 'cherry']\n\n# 1부터 시작하려고 함\nprint(my_list[1])  # 첫 번째 아이템을 원했지만, 두 번째 아이템이 출력됨\n                        </pre>\n                    </div>\n                    <div class=\"bg-green-50 p-3 rounded-lg border-l-4 border-green-500\">\n                        <div class=\"text-green-600 font-medium mb-1\">✅ 올바른 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">\n# 리스트 생성\nmy_list = ['apple', 'banana', 'cherry']\n\n# 0부터 시작함\nprint(my_list[0])  # 첫 번째 아이템이 제대로 출력됨\n                        </pre>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </section>\n</div>\n        </div>",
    "created_at": "2025-01-22T08:34:50.332Z",
    "updated_at": "2025-01-22T08:34:50.332Z"
  }
},
{
  "model": "courses.theorycontent",
  "pk": 5,
  "fields": {
    "topic_id": "tuples",
    "content": "<div class=\"space-y-8\">\n            <div class=\"space-y-8\">\n    <!-- 1. 개념 소개 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">개념 소개</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            파이썬에서 <b>튜플</b>이라는 개념은 어렵게 느껴질 수 있지만, 일상생활에서도 이와 비슷한 개념을 쉽게 찾아볼 수 있습니다. 예를 들어, 우리가 주로 사용하는 비행기 표에는 좌석 번호, 출발지, 도착지, 날짜, 시간 등이 고정되어 있죠. 이 정보들은 비행기 표를 구매한 이후에는 변경할 수 없습니다. 파이썬의 <span style='color: #0066cc;'>튜플</span>도 비슷합니다. 튜플에 담긴 값들은 한번 정해지면 변경할 수 없는 고정된 값을 가지게 됩니다.\n        </p>\n    </section>\n\n    <!-- 2. 실생활 비유 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">비유</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            튜플을 더 쉽게 이해하려면, 생일이나 전화번호와 같이 한번 정해지면 변경되지 않는 정보들을 생각해보세요. 이러한 정보들은 변하지 않아야 하므로, 튜플로 구현하는 것이 좋습니다.\n        </p>\n        <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n            <pre class=\"text-white font-mono text-sm\">\n# 튜플 선언\nmy_birthday = (\"1990\", \"3\", \"15\")\n\n# 값을 변경하려고 시도하면 오류 발생\nmy_birthday[0] = \"1991\"  # TypeError\n            </pre>\n            <p class=\"text-green-400 mt-2\"># 실행 결과: TypeError: 'tuple' object does not support item assignment</p>\n        </div>\n    </section>\n\n    <!-- 3. 실생활 응용 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">실생활 응용</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            튜플은 파이썬 프로그래밍에서 굉장히 유용하게 사용됩니다. 예를 들어, 튜플은 고정된 순서를 가진 데이터를 다룰 때 유용하게 사용됩니다. 또한, 튜플은 딕셔너리의 키로 사용될 수 있습니다. 이러한 특성 덕분에 튜플은 파이썬에서 다양한 상황에서 사용되곤 합니다.\n        </p>\n    </section>\n\n    <!-- 4. 핵심 포인트 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">핵심 포인트</h2>\n        <div class=\"space-y-4\">\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                튜플은 한번 생성하면 변경할 수 없는 변하지 않는 값을 담는 파이썬의 자료형입니다.\n            </div>\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                튜플은 순서를 가지며, 딕셔너리의 키로 사용될 수 있습니다.\n            </div>\n        </div>\n    </section>\n\n    <!-- 5. 주의사항 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold mb-3\">주의사항</h2>\n        <ul class=\"list-decimal list-inside space-y-4\">\n            <li>\n                <div class=\"mb-2\">튜플은 값의 변경이 불가능하다는 점을 항상 기억해야 합니다. 튜플에 담긴 값을 변경하려고 시도하면 오류가 발생합니다.</div>\n                <div class=\"space-y-2\">\n                    <div class=\"bg-red-50 p-3 rounded-lg border-l-4 border-red-500\">\n                        <div class=\"text-red-600 font-medium mb-1\">❌ 잘못된 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">\n# 튜플 선언\nmy_birthday = (\"1990\", \"3\", \"15\")\n\n# 값을 변경하려고 시도하면 오류 발생\nmy_birthday[0] = \"1991\"  # TypeError\n                        </pre>\n                    </div>\n                    <div class=\"bg-green-50 p-3 rounded-lg border-l-4 border-green-500\">\n                        <div class=\"text-green-600 font-medium mb-1\">✅ 올바른 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">\n# 튜플 선언\nmy_birthday = (\"1990\", \"3\", \"15\")\n\n# 튜플 자체를 변경\nmy_birthday = (\"1991\", \"3\", \"15\")  # 이렇게 변경 가능\n                        </pre>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </section>\n</div>\n        </div>",
    "created_at": "2025-01-22T08:35:33.540Z",
    "updated_at": "2025-01-22T08:35:33.540Z"
  }
},
{
  "model": "courses.theorycontent",
  "pk": 6,
  "fields": {
    "topic_id": "dictionaries",
    "content": "<div class=\"space-y-8\">\n            <div class=\"space-y-8\">\n    <!-- 1. 개념 소개 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">개념 소개</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            파이썬에서 <b>사전(Dictionary)</b>은 키와 값의 쌍을 저장하는 유용한 데이터 구조입니다. 이를 일상생활에서 열쇠와 열쇠고리에 비유할 수 있습니다. 열쇠는 우리가 찾고자 하는 대상이고, 열쇠고리는 그 대상을 가리키는 값입니다. 파이썬에서는 이 열쇠를 <span style='color: #0066cc;'>키(Key)</span>, 열쇠고리를 <span style='color: #0066cc;'>값(Value)</span>라고 부릅니다.\n        </p>\n    </section>\n\n    <!-- 2. 실생활 비유 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">비유</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            사전(Dictionary)을 전화번호부에 비유할 수 있습니다. 전화번호부에서 이름(키)을 통해 전화번호(값)을 찾는 것처럼, 사전에서도 키를 통해 값을 찾을 수 있습니다. 또한, 전화번호부에서 이름은 고유해야 하는 것처럼, 사전에서도 키는 고유해야 합니다.\n        </p>\n        <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n            <pre class=\"text-white font-mono text-sm\">\n# 전화번호부를 사전으로 표현하였습니다.\nphonebook = {\"John\": \"010-1234-5678\", \"Jane\": \"010-9876-5432\"}\nprint(phonebook[\"John\"])  # John의 전화번호를 찾습니다.\n            </pre>\n            <p class=\"text-green-400 mt-2\"># 실행 결과: 010-1234-5678</p>\n        </div>\n    </section>\n\n    <!-- 3. 실생활 응용 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">실생활 응용</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            사전은 웹 개발에서 요청과 응답을 처리할 때, 데이터베이스에서 데이터를 조회하거나 저장할 때, 혹은 어떤 아이템의 수량을 계산할 때 등 다양한 상황에서 사용됩니다. 이러한 상황에서 사전은 효율적인 데이터 조회와 저장을 가능하게 합니다.\n        </p>\n    </section>\n\n    <!-- 4. 핵심 포인트 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">핵심 포인트</h2>\n        <div class=\"space-y-4\">\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                사전은 키-값 쌍으로 이루어지며, 키를 통해 값을 빠르게 찾을 수 있습니다.\n            </div>\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                사전의 키는 고유해야 하며, 같은 키로 두 개 이상의 값을 가질 수 없습니다.\n            </div>\n        </div>\n    </section>\n\n    <!-- 5. 주의사항 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold mb-3\">주의사항</h2>\n        <ul class=\"list-decimal list-inside space-y-4\">\n            <li>\n                <div class=\"mb-2\">사전은 순서를 유지하지 않습니다. 따라서 특정 위치의 값을 가져오는 것은 불가능합니다.</div>\n                <div class=\"space-y-2\">\n                    <div class=\"bg-red-50 p-3 rounded-lg border-l-4 border-red-500\">\n                        <div class=\"text-red-600 font-medium mb-1\">❌ 잘못된 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">\nmy_dict = {\"apple\": 1, \"banana\": 2, \"cherry\": 3}\nprint(my_dict[1])  # 이는 오류를 발생시킵니다.\n                        </pre>\n                    </div>\n                    <div class=\"bg-green-50 p-3 rounded-lg border-l-4 border-green-500\">\n                        <div class=\"text-green-600 font-medium mb-1\">✅ 올바른 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">\nmy_dict = {\"apple\": 1, \"banana\": 2, \"cherry\": 3}\nprint(my_dict[\"apple\"])  # 이는 apple에 대응하는 값을 출력합니다.\n                        </pre>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </section>\n</div>\n        </div>",
    "created_at": "2025-01-22T08:36:36.614Z",
    "updated_at": "2025-01-22T08:36:36.614Z"
  }
},
{
  "model": "courses.theorycontent",
  "pk": 7,
  "fields": {
    "topic_id": "conditionals",
    "content": "<div class=\"space-y-8\">\n            <div class=\"space-y-8\">\n    <!-- 1. 개념 소개 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">개념 소개</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            파이썬의 조건문이란, 특정 조건을 만족할 때만 명령을 실행하도록 하는 구문입니다. 말 그대로 어떤 <b>조건</b>이 주어지고, 그 조건이 <b>참(True)</b>이면 특정 코드가 실행되는 구조입니다. 반대로 그 조건이 <span style='color: #0066cc;'>거짓(False)</span>이면 코드는 실행되지 않습니다.\n        </p>\n    </section>\n\n    <!-- 2. 실생활 비유 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">비유</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            조건문을 이해하는 가장 쉬운 방법은 우리의 일상생활에서 찾아보는 것입니다. 예를 들어, 우산을 챙길지 말지 결정하는 과정을 생각해봅시다. \"오늘 비가 올까?\"라는 질문에 '네'라는 답이 나온다면 우산을 챙기고, '아니오'라는 답이 나온다면 우산을 챙기지 않습니다. 이 과정이 바로 조건문과 같습니다.\n        </p>\n        <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n            <pre class=\"text-white font-mono text-sm\">\n# 파이썬에서의 조건문 예제\nrain = True  # 비가 오는지 안오는지를 나타내는 변수\n\nif rain:  # 만약 비가 온다면\n    print(\"우산을 챙기세요.\")  # 우산을 챙기라는 메세지를 출력\nelse:  # 그렇지 않다면\n    print(\"우산을 챙길 필요가 없습니다.\")  # 우산을 챙길 필요가 없다는 메세지를 출력\n            </pre>\n            <p class=\"text-green-400 mt-2\"># 실행 결과: 우산을 챙기세요.</p>\n        </div>\n    </section>\n\n    <!-- 3. 실생활 응용 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">실생활 응용</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            조건문은 프로그래밍에서 굉장히 중요한 개념입니다. 사용자로부터 입력을 받아 그에 따라 다른 동작을 수행하거나, 데이터의 특정 조건을 검사하여 그에 따라 다른 처리를 하는 등 다양한 상황에서 활용됩니다.\n        </p>\n    </section>\n\n    <!-- 4. 핵심 포인트 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">핵심 포인트</h2>\n        <div class=\"space-y-4\">\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                조건문은 '만약~라면'의 형태로, 주어진 조건이 참이면 특정 코드를 실행합니다.\n            </div>\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                조건문은 프로그램의 흐름을 제어하는 데 사용되며, 사용자의 입력이나 데이터의 상태에 따라 다른 코드를 실행할 수 있게 합니다.\n            </div>\n        </div>\n    </section>\n\n    <!-- 5. 주의사항 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold mb-3\">주의사항</h2>\n        <ul class=\"list-decimal list-inside space-y-4\">\n            <li>\n                <div class=\"mb-2\">조건문을 작성할 때는 조건이 정확하게 참인지 거짓인지 검사하는 부분이 중요합니다. 조건이 모호하거나 잘못 설정되면 프로그램이 의도한 대로 동작하지 않습니다.</div>\n                <div class=\"space-y-2\">\n                    <div class=\"bg-red-50 p-3 rounded-lg border-l-4 border-red-500\">\n                        <div class=\"text-red-600 font-medium mb-1\">❌ 잘못된 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">\nif 'rain':  # 'rain'은 문자열이기 때문에 항상 참입니다.\n    print(\"우산을 챙기세요.\")\nelse:\n    print(\"우산을 챙길 필요가 없습니다.\")\n                        </pre>\n                    </div>\n                    <div class=\"bg-green-50 p-3 rounded-lg border-l-4 border-green-500\">\n                        <div class=\"text-green-600 font-medium mb-1\">✅ 올바른 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">\nrain = True  # 비가 오는지를 나타내는 변수\n\nif rain:\n    print(\"우산을 챙기세요.\")\nelse:\n    print(\"우산을 챙길 필요가 없습니다.\")\n                        </pre>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </section>\n</div>\n        </div>",
    "created_at": "2025-01-22T08:37:19.314Z",
    "updated_at": "2025-01-22T08:37:19.314Z"
  }
},
{
  "model": "courses.theorycontent",
  "pk": 8,
  "fields": {
    "topic_id": "loops",
    "content": "<div class=\"space-y-8\">\n            <div class=\"space-y-8\">\n    <!-- 1. 개념 소개 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">개념 소개</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            '반복문'이라는 단어를 들으면 무엇이 떠오르세요? 어떤 행동을 반복해서 수행한다는 것이겠죠? 파이썬에서의 <b>반복문</b>도 마찬가지입니다. 특정 조건이 만족될 때까지 코드를 반복해서 실행하는 것을 말합니다. <span style='color: #0066cc;'>for문</span>과 <span style='color: #0066cc;'>while문</span>이 대표적인 반복문입니다. \n        </p>\n    </section>\n\n    <!-- 2. 실생활 비유 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">비유</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            '반복문'을 생각할 때, 운동을 하거나 요리를 할 때의 반복적인 동작을 떠올려 보세요. 운동을 할 때 특정 동작을 10번 반복한다면, 이것은 'for문'과 같습니다. 요리를 할 때는 재료가 남아있는 동안 계속해서 재료를 넣어줘야 하죠? 이것은 'while문'과 같습니다. \n        </p>\n        <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n            <pre class=\"text-white font-mono text-sm\">\n# 운동 동작 반복 (for문)\nfor i in range(10):\n    print(\"운동 동작 수행\")\n\n# 요리 재료 넣기 (while문)\ningredients = 5\nwhile ingredients > 0:\n    print(\"재료 넣기\")\n    ingredients -= 1\n            </pre>\n            <p class=\"text-green-400 mt-2\"># 실행 결과: '운동 동작 수행'이 10번 출력, '재료 넣기'가 5번 출력</p>\n        </div>\n    </section>\n\n    <!-- 3. 실생활 응용 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">실생활 응용</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            반복문은 우리가 일상생활에서 수행하는 많은 작업들을 자동화하는 데 사용됩니다. 예를 들어, 여러분이 웹사이트에서 특정 데이터를 수집하려면, 각 페이지를 순회하면서 정보를 수집하는 코드를 작성할 수 있습니다. 이때 반복문이 사용됩니다. 또한, 게임에서 캐릭터가 일정한 패턴으로 움직이도록 하거나, 애니메이션 효과를 주는 데도 반복문이 활용됩니다.\n        </p>\n    </section>\n\n    <!-- 4. 핵심 포인트 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">핵심 포인트</h2>\n        <div class=\"space-y-4\">\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                반복문은 특정 조건이 만족될 때까지 코드를 반복해서 실행하는 구조입니다. 'for문'과 'while문'이 대표적입니다.\n            </div>\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                반복문은 일상생활에서 수행하는 많은 작업들을 자동화하는 데 사용됩니다. 웹스크래핑, 게임, 애니메이션 등 다양한 분야에서 활용됩니다.\n            </div>\n        </div>\n    </section>\n\n    <!-- 5. 주의사항 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold mb-3\">주의사항</h2>\n        <ul class=\"list-decimal list-inside space-y-4\">\n            <li>\n                <div class=\"mb-2\">반복문을 사용할 때 가장 주의해야 할 점은 '무한 반복'입니다. 이는 조건이 항상 참이어서 반복문이 끝나지 않는 상황을 말합니다. 이를 방지하기 위해서는 반복문의 조건을 잘 설정하고, 필요한 경우 반복문을 강제로 종료하는 코드를 작성해야 합니다.</div>\n                <div class=\"space-y-2\">\n                    <div class=\"bg-red-50 p-3 rounded-lg border-l-4 border-red-500\">\n                        <div class=\"text-red-600 font-medium mb-1\">❌ 잘못된 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">\nwhile True:\n    print(\"무한 반복\")\n                        </pre>\n                    </div>\n                    <div class=\"bg-green-50 p-3 rounded-lg border-l-4 border-green-500\">\n                        <div class=\"text-green-600 font-medium mb-1\">✅ 올바른 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">\ncount = 0\nwhile count < 5:\n    print(\"반복\")\n    count += 1\n                        </pre>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </section>\n</div>\n        </div>",
    "created_at": "2025-01-22T08:38:02.477Z",
    "updated_at": "2025-01-22T08:38:02.477Z"
  }
},
{
  "model": "courses.theorycontent",
  "pk": 9,
  "fields": {
    "topic_id": "functions",
    "content": "<div class=\"space-y-8\">\n            <div class=\"space-y-8\">\n    <!-- 1. 개념 소개 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">개념 소개</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            파이썬에서 <b>함수</b>는 특정 작업을 수행하는 코드의 한 덩어리입니다. 예를 들어, 숫자를 추가하거나 문자열을 출력하는 작업이 있을 수 있죠. 함수를 이용하면 같은 코드를 여러 번 작성하지 않고, 필요할 때마다 호출해서 사용할 수 있습니다. 이렇게 하면 코드가 깔끔해지고, 관리하기도 쉬워져요. 함수는 <span style='color: #0066cc;'>def</span> 키워드를 사용해 정의합니다.\n        </p>\n    </section>\n\n    <!-- 2. 실생활 비유 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">비유</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            함수를 비유하자면, 요리 레시피와 같습니다. 레시피는 원하는 요리를 만드는 방법을 담고 있죠. 레시피 대로 재료를 준비하고, 순서대로 조리하면 원하는 요리를 만들 수 있습니다. 함수도 마찬가지로, 특정 작업을 수행하는 방법을 담고 있습니다. 함수에 필요한 값(재료)을 주고, 함수는 그 값을 이용해 작업을 수행하고, 결과(요리)를 반환합니다.\n        </p>\n        <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n            <pre class=\"text-white font-mono text-sm\">\ndef add(a, b):  # 더하기 함수 정의\n    return a + b  # 결과 반환\n\nresult = add(3, 4)  # 함수 호출과 결과 저장\nprint(result)  # 결과 출력\n            </pre>\n            <p class=\"text-green-400 mt-2\"># 실행 결과: 7</p>\n        </div>\n    </section>\n\n    <!-- 3. 실생활 응용 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">실생활 응용</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            함수는 프로그래밍 상황에 따라 다양하게 사용됩니다. 예를 들어, 웹사이트에서 사용자의 정보를 처리하는 함수, 게임에서 점수를 계산하는 함수, 데이터 분석에서 특정 조건에 맞는 데이터를 찾는 함수 등이 있습니다. 이렇게 함수를 활용하면 복잡하고 반복적인 작업을 간단하게 처리할 수 있습니다.\n        </p>\n    </section>\n\n    <!-- 4. 핵심 포인트 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">핵심 포인트</h2>\n        <div class=\"space-y-4\">\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                함수는 특정 작업을 수행하는 코드의 한 덩어리로, 반복적인 코드를 줄이고 코드의 가독성을 높여줍니다.\n            </div>\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                함수는 필요한 값(매개변수)을 받아서, 그 값에 따른 작업을 수행하고 결과를 반환합니다.\n            </div>\n        </div>\n    </section>\n\n    <!-- 5. 주의사항 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold mb-3\">주의사항</h2>\n        <ul class=\"list-decimal list-inside space-y-4\">\n            <li>\n                <div class=\"mb-2\">함수를 호출할 때는 함수가 필요로 하는 매개변수의 수와 타입을 정확하게 전달해야 합니다. 그렇지 않으면 에러가 발생합니다.</div>\n                <div class=\"space-y-2\">\n                    <div class=\"bg-red-50 p-3 rounded-lg border-l-4 border-red-500\">\n                        <div class=\"text-red-600 font-medium mb-1\">❌ 잘못된 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">\ndef add(a, b):  \n    return a + b  \n\nresult = add(3)  # 매개변수의 수가 부족\nprint(result)  \n                        </pre>\n                    </div>\n                    <div class=\"bg-green-50 p-3 rounded-lg border-l-4 border-green-500\">\n                        <div class=\"text-green-600 font-medium mb-1\">✅ 올바른 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">\ndef add(a, b):  \n    return a + b  \n\nresult = add(3, 4)  # 매개변수의 수가 맞음\nprint(result)  \n                        </pre>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </section>\n</div>\n        </div>",
    "created_at": "2025-01-22T08:39:07.916Z",
    "updated_at": "2025-01-22T08:39:07.916Z"
  }
},
{
  "model": "courses.theorycontent",
  "pk": 10,
  "fields": {
    "topic_id": "classes",
    "content": "<div class=\"space-y-8\">\n            <div class=\"space-y-8\">\n    <!-- 1. 개념 소개 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">개념 소개</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            오늘의 주제는 <b>클래스</b>입니다. 클래스는 <span style='color: #0066cc;'>파이썬</span>에서 매우 중요한 개념이며, 코드를 정리하고 재사용하기 위한 매우 효율적인 도구입니다. 클래스를 이해하려면 <b>붕어빵 틀</b>을 생각해보세요. 붕어빵 틀을 이용하면 모양, 크기, 패턴이 동일한 붕어빵을 계속해서 만들 수 있죠. 여기서 붕어빵 틀이 바로 클래스에 해당하며, 틀에서 나온 각각의 붕어빵은 클래스의 <span style='color: #0066cc;'>인스턴스</span>(객체)입니다.\n        </p>\n    </section>\n\n    <!-- 2. 실생활 비유 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">비유</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            다른 예로, 클래스를 로봇 조립 설명서에 비유할 수도 있습니다. 설명서에는 로봇을 만드는 방법, 그리고 로봇이 할 수 있는 기능들이 정의되어 있죠. 이 설명서를 바탕으로 로봇을 여러 개 만들 수 있습니다. 이 때, 각각의 로봇은 클래스의 인스턴스이며, 로봇이 할 수 있는 행동들은 클래스에 정의된 메서드에 해당합니다.\n        </p>\n        <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n            <pre class=\"text-white font-mono text-sm\">\nclass Robot: # 클래스 정의\n    def __init__(self, name):\n        self.name = name # 인스턴스 변수 설정\n\n    def say_hello(self): # 메서드 정의\n        print(f'Hello, I am {self.name}.')\n\nr1 = Robot('R2-D2') # 클래스를 이용하여 인스턴스 생성\nr1.say_hello() # 메서드 호출\n</pre>\n            <p class=\"text-green-400 mt-2\"># 실행 결과: Hello, I am R2-D2.</p>\n        </div>\n    </section>\n\n    <!-- 3. 실생활 응용 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">실생활 응용</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            클래스는 코드를 정리하고 재사용하기에 매우 유용합니다. 예를 들어, 게임 프로그래밍에서는 캐릭터, 물체, 적 등 많은 요소들이 클래스로 정의됩니다. 각 클래스에는 속성과 메서드가 정의되어 있어, 여러 개의 인스턴스를 생성하고 사용할 수 있습니다. 또한, 웹 개발에서도 사용자, 상품, 리뷰 등의 요소들을 클래스로 만들어 관리합니다.\n        </p>\n    </section>\n\n    <!-- 4. 핵심 포인트 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">핵심 포인트</h2>\n        <div class=\"space-y-4\">\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                클래스는 '붕어빵 틀' 또는 '로봇 조립 설명서'처럼, 동일한 구조와 기능을 가진 객체를 만드는 틀입니다.\n            </div>\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                클래스에서 생성된 각각의 객체를 인스턴스라 부르며, 인스턴스는 클래스에 정의된 속성과 메서드를 가집니다.\n            </div>\n        </div>\n    </section>\n\n    <!-- 5. 주의사항 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold mb-3\">주의사항</h2>\n        <ul class=\"list-decimal list-inside space-y-4\">\n            <li>\n                <div class=\"mb-2\">클래스의 메서드에서 클래스의 속성을 사용할 때는 반드시 'self.'를 붙여야 합니다. 'self'는 현재 인스턴스를 참조하는 키워드입니다.</div>\n                <div class=\"space-y-2\">\n                    <div class=\"bg-red-50 p-3 rounded-lg border-l-4 border-red-500\">\n                        <div class=\"text-red-600 font-medium mb-1\">❌ 잘못된 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">\nclass Robot:\n    def __init__(self, name):\n        self.name = name\n\n    def say_hello(self):\n        print(f'Hello, I am {name}.') # 'self.'가 빠졌습니다.\n</pre>\n                    </div>\n                    <div class=\"bg-green-50 p-3 rounded-lg border-l-4 border-green-500\">\n                        <div class=\"text-green-600 font-medium mb-1\">✅ 올바른 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">\nclass Robot:\n    def __init__(self, name):\n        self.name = name\n\n    def say_hello(self):\n        print(f'Hello, I am {self.name}.') # 'self.'를 사용하여 현재 인스턴스의 'name' 속성에 접근합니다.\n</pre>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </section>\n</div>\n        </div>",
    "created_at": "2025-01-22T08:39:56.634Z",
    "updated_at": "2025-01-22T08:39:56.634Z"
  }
},
{
  "model": "courses.theorycontent",
  "pk": 11,
  "fields": {
    "topic_id": "modules",
    "content": "<div class=\"space-y-8\">\n            <div class=\"space-y-8\">\n    <!-- 1. 개념 소개 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">개념 소개</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            오늘 배울 주제는 <b>모듈</b>입니다. 파이썬에서 모듈이란, <span style='color: #0066cc;'>함수나 변수, 클래스들을 모아 놓은 파일</span>을 말해요. 모듈을 사용하면 코드를 재사용하거나 공유할 수 있어서 매우 유용합니다. 모듈은 .py 확장자로 끝나는 파이썬 파일이라고 생각하면 되겠습니다.\n        </p>\n    </section>\n\n    <!-- 2. 실생활 비유 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">비유</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            모듈을 일상 생활에서 비유해보면, '서랍장'과 비슷하다고 할 수 있어요. 서랍장 안에는 여러 개의 서랍이 있고, 각 서랍에는 서로 다른 종류의 물건들이 정리되어 있잖아요? 모듈도 이와 비슷하게 서로 관련 있는 함수나 변수, 클래스들을 한 곳에 모아놓은 것입니다.\n        </p>\n        <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n            <pre class=\"text-white font-mono text-sm\">\n# 모듈 만들기\n# calculator.py라는 파일을 만들고, 더하기와 빼기 함수를 만들어보겠습니다.\ndef add(a, b):\n    return a + b\n\ndef subtract(a, b):\n    return a - b\n            </pre>\n            <p class=\"text-green-400 mt-2\"># 실행 결과: 없음 (모듈은 정의만 하고 바로 실행하지 않기 때문입니다.)</p>\n        </div>\n    </section>\n\n    <!-- 3. 실생활 응용 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">실생활 응용</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            모듈은 코드를 재사용하고 공유하는 데 큰 역할을 합니다. 예를 들어, 팀 프로젝트를 진행할 때 모둘을 잘 활용하면 한 팀원이 작성한 함수를 다른 팀원들이 쉽게 가져와 사용할 수 있어요. 또한, 파이썬에서 제공하는 기본 모듈을 사용하면 복잡한 기능을 쉽게 구현할 수 있습니다. 예를 들어, 시간과 관련된 기능을 구현하려면 time 모듈, 날짜와 관련된 기능을 구현하려면 datetime 모듈을 사용하면 됩니다.\n        </p>\n    </section>\n\n    <!-- 4. 핵심 포인트 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">핵심 포인트</h2>\n        <div class=\"space-y-4\">\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                모듈은 함수나 변수, 클래스들을 모아 놓은 파이썬 파일입니다. 코드를 재사용하고 공유하는 데 유용합니다.\n            </div>\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                모듈을 사용하려면 import 키워드를 사용합니다. 모듈 내의 특정 함수를 사용하려면 '모듈명.함수명()' 형태로 호출합니다.\n            </div>\n        </div>\n    </section>\n\n    <!-- 5. 주의사항 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold mb-3\">주의사항</h2>\n        <ul class=\"list-decimal list-inside space-y-4\">\n            <li>\n                <div class=\"mb-2\">모듈을 import할 때는 반드시 해당 모듈이 현재 작업 중인 디렉토리에 존재하거나 파이썬 라이브러리가 저장된 디렉토리에 존재해야 합니다. 그렇지 않으면 모듈을 찾을 수 없다는 오류가 발생합니다.</div>\n                <div class=\"space-y-2\">\n                    <div class=\"bg-red-50 p-3 rounded-lg border-l-4 border-red-500\">\n                        <div class=\"text-red-600 font-medium mb-1\">❌ 잘못된 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">import non_existent_module</pre>\n                    </div>\n                    <div class=\"bg-green-50 p-3 rounded-lg border-l-4 border-green-500\">\n                        <div class=\"text-green-600 font-medium mb-1\">✅ 올바른 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">import calculator # calculator.py 파일이 작업 디렉토리에 있어야 합니다.</pre>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </section>\n</div>\n        </div>",
    "created_at": "2025-01-22T08:41:10.076Z",
    "updated_at": "2025-01-22T08:41:10.077Z"
  }
},
{
  "model": "courses.theorycontent",
  "pk": 12,
  "fields": {
    "topic_id": "exceptions",
    "content": "<div class=\"space-y-8\">\n            <div class=\"space-y-8\">\n    <!-- 1. 개념 소개 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">개념 소개</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            파이썬에서 <b>예외</b>는 프로그램 실행 중 발생할 수 있는 오류나 문제를 말해요. 예를 들어, 우리가 숫자 10을 0으로 나누려고 하면 프로그램은 이를 처리할 수 없어서 오류가 발생하죠. <span style='color: #0066cc;'>예외 처리</span>는 이런 오류가 발생했을 때 어떻게 대응할지를 미리 정하는 방법입니다. 이것은 프로그램을 더 안정적이고 예측 가능하게 만들어 주는 중요한 개념이에요.\n        </p>\n    </section>\n\n    <!-- 2. 실생활 비유 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">비유</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            예외 처리를 소방안전 시스템에 비유해볼게요. 소방안전 시스템은 불이 나면 자동으로 스프링클러가 작동하거나, 비상벨이 울리는 등의 동작을 합니다. 이것이 바로 예외 처리와 같아요. 프로그램이 실행되다가 문제가 생기면(=불이 나면), 미리 설정해둔 동작을 수행하게 하는 것이죠.\n        </p>\n        <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n            <pre class=\"text-white font-mono text-sm\">\ntry:\n    print(10 / 0) # 0으로 나누는 오류 발생\nexcept ZeroDivisionError:\n    print(\"0으로 나눌 수 없습니다.\") # 오류 대응\n            </pre>\n            <p class=\"text-green-400 mt-2\"># 실행 결과: 0으로 나눌 수 없습니다.</p>\n        </div>\n    </section>\n\n    <!-- 3. 실생활 응용 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">실생활 응용</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            예외 처리는 프로그램이 예상치 못한 상황에 봉착했을 때 안전하게 처리하기 위해 사용됩니다. 예를 들어, 웹 사이트에서 사용자가 올바르지 않은 형식의 이메일 주소를 입력했을 때, 예외 처리를 통해 해당 오류를 잡아내고 사용자에게 알려줄 수 있습니다. 또한, 파일을 열려고 했는데 해당 파일이 존재하지 않는 경우에도 예외 처리를 통해 오류 메시지를 제공하고 프로그램을 안전하게 종료할 수 있습니다.\n        </p>\n    </section>\n\n    <!-- 4. 핵심 포인트 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">핵심 포인트</h2>\n        <div class=\"space-y-4\">\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                예외 처리는 프로그램의 안정성과 예측 가능성을 높이는 중요한 기능입니다.\n            </div>\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                try-except 구문을 사용하여 예외를 처리할 수 있습니다.\n            </div>\n        </div>\n    </section>\n\n    <!-- 5. 주의사항 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold mb-3\">주의사항</h2>\n        <ul class=\"list-decimal list-inside space-y-4\">\n            <li>\n                <div class=\"mb-2\">예외 처리를 할 때는 예외의 종류를 정확히 명시해야 합니다. 모든 예외를 한꺼번에 처리하려고 하면, 예상하지 못한 오류에 대응하지 못하는 상황이 발생할 수 있습니다.</div>\n                <div class=\"space-y-2\">\n                    <div class=\"bg-red-50 p-3 rounded-lg border-l-4 border-red-500\">\n                        <div class=\"text-red-600 font-medium mb-1\">❌ 잘못된 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">\ntry:\n    print(10 / 0) # 0으로 나누는 오류 발생\nexcept:\n    print(\"오류가 발생했습니다.\") # 모든 예외를 한꺼번에 처리\n                        </pre>\n                    </div>\n                    <div class=\"bg-green-50 p-3 rounded-lg border-l-4 border-green-500\">\n                        <div class=\"text-green-600 font-medium mb-1\">✅ 올바른 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">\ntry:\n    print(10 / 0) # 0으로 나누는 오류 발생\nexcept ZeroDivisionError:\n    print(\"0으로 나눌 수 없습니다.\") # 오류 종류를 명시하여 처리\n                        </pre>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </section>\n</div>\n        </div>",
    "created_at": "2025-01-22T08:41:59.087Z",
    "updated_at": "2025-01-22T08:41:59.088Z"
  }
},
{
  "model": "courses.theorycontent",
  "pk": 13,
  "fields": {
    "topic_id": "files",
    "content": "<div class=\"space-y-8\">\n            <div class=\"space-y-8\">\n    <!-- 1. 개념 소개 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">개념 소개</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            파일은 컴퓨터에서 데이터를 저장하고 관리하는 한 방법입니다. 우리가 문서를 작성하면, 그것을 파일로 저장하죠. 이렇게 저장된 파일을 나중에 다시 열어서 내용을 확인하거나 수정할 수 있습니다. 파이썬에서도 이런 파일을 다룰 수 있는 기능을 제공합니다. 우리는 이를 통해 텍스트 파일이나 CSV, 이미지 파일 등 다양한 형태의 파일을 열고, 읽고, 수정하고, 저장할 수 있습니다. 이런 기능을 이용하면, 파이썬 프로그램이 사용자의 입력뿐만 아니라 파일에 저장된 데이터를 기반으로 동작하도록 할 수 있습니다.\n        </p>\n    </section>\n\n    <!-- 2. 실생활 비유 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">비유</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            파일을 다루는 것은 책을 읽고 쓰는 것과 비슷합니다. 책을 읽을 때 우리는 책을 열고, 페이지를 넘겨가며 내용을 확인합니다. 마찬가지로 파일을 읽을 때 우리는 파일을 열고, 데이터를 읽어가며 내용을 확인합니다. 책에 새로운 내용을 쓰려면 새 페이지에 글을 쓰듯이, 파일에 새로운 데이터를 쓰려면 파일에 데이터를 씁니다. 이 때, 쓴 데이터는 파일에 영구적으로 저장됩니다. 마치 책에 글을 쓴 것처럼요.\n        </p>\n        <div class=\"bg-gray-900 rounded-lg p-4 mt-4\">\n            <pre class=\"text-white font-mono text-sm\">\n# 파일 열기\nfile = open('example.txt', 'r')\n\n# 파일 읽기\ncontent = file.read()\n\n# 파일 닫기\nfile.close()\n\n# 내용 출력\nprint(content)\n            </pre>\n            <p class=\"text-green-400 mt-2\"># 실행 결과: Hello, world!</p>\n        </div>\n    </section>\n\n    <!-- 3. 실생활 응용 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">실생활 응용</h2>\n        <p class=\"text-gray-800 leading-relaxed\">\n            파일을 다루는 기능은 다양한 곳에서 사용됩니다. 예를 들어, 웹사이트에서 사용자가 업로드한 이미지나 동영상 파일을 서버에 저장하거나, 사용자의 정보를 텍스트 파일로 저장하여 로그인 기능을 구현할 수 있습니다. 또한, 큰 데이터를 분석하는 데 사용되는 CSV나 엑셀 파일을 파이썬에서 열어 데이터를 읽고 처리하는 데도 사용됩니다.\n        </p>\n    </section>\n\n    <!-- 4. 핵심 포인트 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold text-black-600 mb-3\">핵심 포인트</h2>\n        <div class=\"space-y-4\">\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                파이썬에서 파일을 다루려면 먼저 파일을 열어야 합니다. 이를 위해 open 함수를 사용하며, 이 함수는 파일 이름과 모드를 인자로 받습니다. 모드에는 'r'(읽기), 'w'(쓰기), 'a'(추가) 등이 있습니다.\n            </div>\n            <div class=\"key-point bg-gray-50 border-l-4 border-blue-500 p-4\">\n                파일을 다룬 후에는 반드시 닫아주어야 합니다. 이를 위해 close 함수를 사용합니다. 파일을 닫지 않으면 파일이 손상될 수 있으므로 주의해야 합니다.\n            </div>\n        </div>\n    </section>\n\n    <!-- 5. 주의사항 섹션 -->\n    <section class=\"mb-8\">\n        <h2 class=\"text-lg font-semibold mb-3\">주의사항</h2>\n        <ul class=\"list-decimal list-inside space-y-4\">\n            <li>\n                <div class=\"mb-2\">파일을 열 때, 해당 파일이 실제로 존재하는지 확인해야 합니다. 만약 존재하지 않는 파일을 열려고 하면 오류가 발생합니다.</div>\n                <div class=\"space-y-2\">\n                    <div class=\"bg-red-50 p-3 rounded-lg border-l-4 border-red-500\">\n                        <div class=\"text-red-600 font-medium mb-1\">❌ 잘못된 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">\n# 존재하지 않는 파일 열기\nfile = open('non_existent.txt', 'r')\n                        </pre>\n                    </div>\n                    <div class=\"bg-green-50 p-3 rounded-lg border-l-4 border-green-500\">\n                        <div class=\"text-green-600 font-medium mb-1\">✅ 올바른 예시:</div>\n                        <pre class=\"bg-white p-2 rounded\">\n# 파일이 존재하는지 확인한 후 열기\nimport os\n\nif os.path.exists('example.txt'):\n    file = open('example.txt', 'r')\nelse:\n    print('File does not exist.')\n                        </pre>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </section>\n</div>\n        </div>",
    "created_at": "2025-01-22T08:43:14.440Z",
    "updated_at": "2025-01-22T08:43:14.440Z"
  }
}
]
